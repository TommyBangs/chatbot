/// <reference types="node" />
import type { SemanticSearchParams, SemanticSearchResult } from '@context-labs/models/.dist/services/PortalService';
import type { Query, QueryOrigin, QueryResolved, SetQueryFeedbackParams } from '@context-labs/models/.dist/services/QueryService';
export declare class ContextSDKError extends Error {
    constructor(message: string);
}
export type ConfigOpts = {
    apiKey: string;
    baseUrl?: string;
    origin?: QueryOrigin;
};
export type { Query, QueryResolved, SemanticSearchResult, SemanticSearchParams, SetQueryFeedbackParams, };
export type QueryParams = {
    botId: string;
    query: string;
    onData?: (chunk: string) => void;
    onComplete?: (query: QueryResolved) => void;
    onError?: (error: ContextSDKError) => void;
};
export type QueryResponse = {
    controller?: AbortController;
};
/**
 * ContextSDK class
 */
export declare class ContextSDK {
    #private;
    apiKey: string;
    baseUrl: string;
    origin: QueryOrigin;
    constructor(config: ConfigOpts);
    search({ botId, query, topK, }: {
        botId: string;
        query: string;
        topK?: number;
    }): Promise<SemanticSearchResult>;
    query({ botId, query, onData, onComplete, onError, }: QueryParams): Promise<QueryResponse>;
    setQueryFeedback: (params: SetQueryFeedbackParams) => Promise<Query>;
}
//# sourceMappingURL=sdk.d.ts.map