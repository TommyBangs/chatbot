import z from 'zod';
import {
  authedServiceRequest,
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';

export const zSnippetTypes = z.enum([
  'YouTube',
  'RSS',
  'WebPage',
  'File',
]);

export const snippet = z.object({
  _id: z.string(),
  organizationId: z.string(),
  sourceId: z.string(),
  syncId: z.string(),
  documentId: z.string(),
  title: z.string(),
  text: z.string(),
  type: zSnippetTypes,
  url: z.string().url(),
  domain: z.string().url().optional(),
  lang: z.string().optional(),
  hash: z.string(),
  index: z.number(),
  startTime: z.string().nullable(),
  startSeconds: z.number(),
  endTime: z.string().optional(),
  endSeconds: z.number().optional(),
  releasedAt: z.number().optional(),
  views: z.number().optional(),
  pageNumber: z.number().optional(),
  meta: metadata,
});

export type Snippet = z.infer<typeof snippet>;

export enum SnippetSortBy {
  Relevance = 'Relevance',
  MostPopular = 'Most Popular',
  LeastPopular = 'Least Popular',
  MostRecent = 'Most Recent',
  LeastRecent = 'Least Recent',
}

export interface SnippetService {
  create(request: CreateSnippetRequest): Promise<CreateSnippetResponse>;
  get(request: GetSnippetRequest): Promise<GetSnippetResponse>;
  list(request: ListSnippetsRequest): Promise<ListSnippetsResponse>;
  count(request: CountSnippetsRequest): Promise<CountSnippetsResponse>;
}

/** ******************************************************************************
*  Create Snippet
******************************************************************************* */

export const createSnippetParams = z.object({
  organizationId: z.string(),
  sourceId: z.string(),
  syncId: z.string(),
  documentId: z.string(),
  title: z.string(),
  text: z.string(),
  type: zSnippetTypes,
  url: z.string().url(),
  domain: z.string().url().optional(),
  lang: z.string().optional(),
  hash: z.string(),
  index: z.number(),
  startTime: z.string().optional(),
  startSeconds: z.number().optional(),
  endTime: z.string().optional(),
  endSeconds: z.number().optional(),
  releasedAt: z.number().optional(),
  views: z.number().optional(),
  pageNumber: z.number().optional(),
});

export const createSnippetRequest = serviceRequest.merge(
  z.object({
    params: z.array(createSnippetParams),
  }),
);

export const createSnippetResponse = serviceResponse.merge(
  z.object({
    snippets: snippet.array().optional(),
  }),
);

export type CreateSnippetParams = z.infer<typeof createSnippetParams>;
export type CreateSnippetRequest = z.infer<typeof createSnippetRequest>;
export type CreateSnippetResponse = z.infer<typeof createSnippetResponse>;

/** ******************************************************************************
*  Get Snippet
******************************************************************************* */

export const getSnippetParams = z.object({
  snippetId: z.string(),
});

export const getSnippetRequest = serviceRequest.merge(
  z.object({
    params: getSnippetParams,
  }),
);

export const getSnippetResponse = serviceResponse.merge(
  z.object({
    snippet: snippet.nullable().optional(),
  }),
);

export type GetSnippetParams = z.infer<typeof getSnippetParams>;
export type GetSnippetRequest = z.infer<typeof getSnippetRequest>;
export type GetSnippetResponse = z.infer<typeof getSnippetResponse>;

/** ******************************************************************************
*  List Snippets
******************************************************************************* */

export const listSnippetsParams = z.object({
  _ids: z.array(z.string()).optional(),
  documentId: z.string().optional(),
});

export const listSnippetsRequest = authedServiceRequest.merge(
  z.object({
    params: listSnippetsParams,
  }),
);

export const listSnippetsResponse = serviceResponse.merge(
  z.object({
    snippets: z.array(snippet).optional(),
  }),
);

export type ListSnippetsParams = z.infer<typeof listSnippetsParams>;
export type ListSnippetsRequest = z.infer<typeof listSnippetsRequest>;
export type ListSnippetsResponse = z.infer<typeof listSnippetsResponse>;

/** ******************************************************************************
*  Count Snippets
******************************************************************************* */

export const countSnippetsParams = z.object({
  sourceId: z.string(),
});

export const countSnippetsRequest = serviceRequest.merge(
  z.object({
    params: countSnippetsParams,
  }),
);

export const countSnippetsResponse = serviceResponse.merge(
  z.object({
    count: z.number().optional(),
  }),
);

export type CountSnippetsParams = z.infer<typeof countSnippetsParams>;
export type CountSnippetsRequest = z.infer<typeof countSnippetsRequest>;
export type CountSnippetsResponse = z.infer<typeof countSnippetsResponse>;
