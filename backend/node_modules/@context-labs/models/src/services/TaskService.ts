import z from 'zod';
import {
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';

export enum TaskTypes {
  ImportSource = 'Import Source',
  StartImportDocument = 'Start Import Document',
  ImportDocumentTranscriptFromYouTube = 'Import Document Transcript From YouTube',
  CreateDocumentSnippets = 'Create Document Snippets',
  ImportDocumentViewsFromYouTube = 'Import Document Views From YouTube',
  ImportDocumentAudio = 'Import Document Audio',
  ImportDocumentWebPage = 'Import Document Web Page',
  ImportUnstructuredDocument = 'Import Unstructured Document',
  StartImportDocumentTranscript = 'Start Import Document Transcript',
  FinishImportDocumentTranscript = 'Finish Import Document Transcript',
  FinishImportDocument = 'Finish Import Document',
}

export interface TaskService {
  createImportSource(request: CreateImportSourceTaskRequest): Promise<CreateImportSourceTaskResponse>;
  createImportDocument(request: CreateImportDocumentTaskRequest): Promise<CreateImportDocumentTaskResponse>;
  createUpdateDocument(request: CreateUpdateDocumentTaskRequest): Promise<CreateImportDocumentTaskResponse>;
}

/** ******************************************************************************
*  Create Import Source
******************************************************************************* */

export const createImportSourceTaskParams = z.object({
  taskId: z.string().optional(),
  syncId: z.string().optional(),
  sourceId: z.string().optional(),
  runAt: z.number().nullable().optional(),
});

export const createImportSourceTaskRequest = serviceRequest.merge(
  z.object({
    params: createImportSourceTaskParams,
  }),
);

export const createImportSourceTaskResponse = serviceResponse.merge(
  z.object({
    taskId: z.string().optional(),
    success: z.boolean().optional(),
  }),
);

export type CreateImportSourceTaskParams = z.infer<typeof createImportSourceTaskParams>;
export type CreateImportSourceTaskRequest = z.infer<typeof createImportSourceTaskRequest>;
export type CreateImportSourceTaskResponse = z.infer<typeof createImportSourceTaskResponse>;

/** ******************************************************************************
*  Create Import Document
******************************************************************************* */

export const createImportDocumentTaskParams = z.object({
  taskId: z.string().optional(),
  documentId: z.string(),
  syncId: z.string(),
  useReplicate: z.boolean(),
  runAt: z.number().optional().nullable(),
});

export const createImportDocumentTaskRequest = serviceRequest.merge(
  z.object({
    params: createImportDocumentTaskParams,
  }),
);

export const createImportDocumentTaskResponse = serviceResponse.merge(
  z.object({
    taskId: z.string().optional(),
    success: z.boolean().optional(),
  }),
);

export type CreateImportDocumentTaskParams = z.infer<typeof createImportDocumentTaskParams>;
export type CreateImportDocumentTaskRequest = z.infer<typeof createImportDocumentTaskRequest>;
export type CreateImportDocumentTaskResponse = z.infer<typeof createImportDocumentTaskResponse>;

/** ******************************************************************************
*  Create Update Document
******************************************************************************* */

export const createUpdateDocumentTaskParams = z.object({
  taskId: z.string(),
  documentId: z.string(),
  syncId: z.string(),
  runAt: z.number().nullable(),
});

export const createUpdateDocumentTaskRequest = serviceRequest.merge(
  z.object({
    params: createUpdateDocumentTaskParams,
  }),
);

export const createUpdateDocumentTaskResponse = serviceResponse.merge(
  z.object({
    taskId: z.string().optional(),
    success: z.boolean().optional(),
  }),
);

export type CreateUpdateDocumentTaskParams = z.infer<typeof createUpdateDocumentTaskParams>;
export type CreateUpdateDocumentTaskRequest = z.infer<typeof createUpdateDocumentTaskRequest>;
export type CreateUpdateDocumentTaskResponse = z.infer<typeof createUpdateDocumentTaskResponse>;
