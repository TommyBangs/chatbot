import z from 'zod';
import { updateUsage, usage } from '../interfaces/Usage';
import {
  authedServiceRequest,
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';
import { invoice } from './InvoiceService';

export const zSubscriptionStatus = z.enum(['Pending', 'Active', 'Canceled']);

export const subscriptionUpgrade = z.object({
  productId: z.string(),
  priceId: z.string(),
  botId: z.string().nullable(),
  sourceIds: z.array(z.string()).nullable(),
});

export const subscription = z.object({
  _id: z.string(),
  organizationId: z.string(),
  stripeCustomerId: z.string(),
  stripeSubscriptionId: z.string(),
  stripeProductId: z.string(),
  stripePriceId: z.string(),
  status: zSubscriptionStatus,
  upgrade: subscriptionUpgrade.nullable(),
  usageLimits: usage,
  meta: metadata,
});

export type Subscription = z.infer<typeof subscription>;
export type SubscriptionUpgrade = z.infer<typeof subscriptionUpgrade>;

export interface SubscriptionService {
  create(request: CreateSubscriptionRequest): Promise<CreateSubscriptionResponse>;
  stageUpgrade(request: StageUpgradeSubscriptionRequest): Promise<StageUpgradeSubscriptionResponse>;
  upgrade(request: UpgradeSubscriptionRequest): Promise<UpgradeSubscriptionResponse>;
  finalizeUpgrade(request: FinalizeUpgradeSubscriptionRequest): Promise<FinalizeUpgradeSubscriptionResponse>;
  syncUpgrade(request: SyncSubscriptionUpgradeRequest): Promise<SyncSubscriptionUpgradeResponse>;
  latest(request: LatestSubscriptionRequest): Promise<LatestSubscriptionResponse>;
  get(request: GetSubscriptionRequest): Promise<GetSubscriptionResponse>;
  list(request: ListSubscriptionsRequest): Promise<ListSubscriptionsResponse>;
  superSetUsageLimits(request: SuperSetSubscriptionUsageLimitsRequest): Promise<SuperSetSubscriptionUsageLimitsResponse>;
}

/** ******************************************************************************
*  Create Subscription
******************************************************************************* */

export const createSubscriptionParams = z.object({
  stripeCustomerId: z.string(),
  stripeSubscriptionId: z.string().nullable(),
  stripeProductId: z.string().nullable(),
  stripePriceId: z.string().nullable(),
  status: zSubscriptionStatus,
});

export const createSubscriptionRequest = authedServiceRequest.merge(
  z.object({
    params: createSubscriptionParams,
  }),
);

export const createSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
  }),
);

export type CreateSubscriptionParams = z.infer<typeof createSubscriptionParams>;
export type CreateSubscriptionRequest = z.infer<typeof createSubscriptionRequest>;
export type CreateSubscriptionResponse = z.infer<typeof createSubscriptionResponse>;

/** ******************************************************************************
*  Stage Upgrade Subscription
******************************************************************************* */

export const stageUpgradeSubscriptionParams = z.object({
  botId: z.string().nullable(),
  sourceIds: z.array(z.string()).nullable(),
  usage: updateUsage.optional(),
});

export const stageUpgradeSubscriptionRequest = authedServiceRequest.merge(
  z.object({
    params: stageUpgradeSubscriptionParams,
  }),
);

export const stageUpgradeSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
  }),
);

export type StageUpgradeSubscriptionParams = z.infer<typeof stageUpgradeSubscriptionParams>;
export type StageUpgradeSubscriptionRequest = z.infer<typeof stageUpgradeSubscriptionRequest>;
export type StageUpgradeSubscriptionResponse = z.infer<typeof stageUpgradeSubscriptionResponse>;

/** ******************************************************************************
*  Upgrade Subscription
******************************************************************************* */

export const uprgadeSubscriptionParams = z.object({
  productId: z.string(),
  priceId: z.string(),
});

export const uprgadeSubscriptionRequest = authedServiceRequest.merge(
  z.object({
    params: uprgadeSubscriptionParams,
  }),
);

export const uprgadeSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
    sessionUrl: z.string().nullable().optional(),
    redirectUrl: z.string().nullable().optional(),
  }),
);

export type UpgradeSubscriptionParams = z.infer<typeof uprgadeSubscriptionParams>;
export type UpgradeSubscriptionRequest = z.infer<typeof uprgadeSubscriptionRequest>;
export type UpgradeSubscriptionResponse = z.infer<typeof uprgadeSubscriptionResponse>;

/** ******************************************************************************
*  Finalize Subscription
******************************************************************************* */

export const finalizeUpgradeSubscriptionParams = z.object({
  stripeSubscriptionId: z.string(),
});

export const finalizeUpgradeSubscriptionRequest = authedServiceRequest.merge(
  z.object({
    params: finalizeUpgradeSubscriptionParams,
  }),
);

export const finalizeUpgradeSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
  }),
);

export type FinalizeUpgradeSubscriptionParams = z.infer<typeof finalizeUpgradeSubscriptionParams>;
export type FinalizeUpgradeSubscriptionRequest = z.infer<typeof finalizeUpgradeSubscriptionRequest>;
export type FinalizeUpgradeSubscriptionResponse = z.infer<typeof finalizeUpgradeSubscriptionResponse>;

/** ******************************************************************************
*  Sync Subscription Upgrade
******************************************************************************* */

export const syncSubscriptionUpgradeParams = z.object({});

export const syncSubscriptionUpgradeRequest = authedServiceRequest.merge(
  z.object({
    params: syncSubscriptionUpgradeParams,
  }),
);

export const syncSubscriptionUpgradeResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
  }),
);

export type SyncSubscriptionUpgradeParams = z.infer<typeof syncSubscriptionUpgradeParams>;
export type SyncSubscriptionUpgradeRequest = z.infer<typeof syncSubscriptionUpgradeRequest>;
export type SyncSubscriptionUpgradeResponse = z.infer<typeof syncSubscriptionUpgradeResponse>;

/** ******************************************************************************
*  Update Latest Subscription
******************************************************************************* */

export const updateLatestSubscriptionParams = subscription;

export const updateLatestSubscriptionRequest = serviceRequest.merge(
  z.object({
    params: updateLatestSubscriptionParams,
  }),
);

export const updateLatestSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
  }),
);

export type UpdateLatestSubscriptionParams = z.infer<typeof updateLatestSubscriptionParams>;
export type UpdateLatestSubscriptionRequest = z.infer<typeof updateLatestSubscriptionRequest>;
export type UpdateLatestSubscriptionResponse = z.infer<typeof updateLatestSubscriptionResponse>;

/** ******************************************************************************
*  Get Latest Subscription
******************************************************************************* */

export const latestSubscriptionParams = z.object({
  organizationId: z.string().optional(),
});

export const latestSubscriptionRequest = authedServiceRequest.merge(
  z.object({
    params: latestSubscriptionParams,
  }),
);

export const latestSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
  }),
);

export type LatestSubscriptionParams = z.infer<typeof latestSubscriptionParams>;
export type LatestSubscriptionRequest = z.infer<typeof latestSubscriptionRequest>;
export type LatestSubscriptionResponse = z.infer<typeof latestSubscriptionResponse>;

/** ******************************************************************************
*  Get Subscription
******************************************************************************* */

export const getSubscriptionParams = z.object({
  subscriptionId: z.string(),
});

export const getSubscriptionRequest = authedServiceRequest.merge(
  z.object({
    params: getSubscriptionParams,
  }),
);

export const getSubscriptionResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.nullable().optional(),
  }),
);

export type GetSubscriptionParams = z.infer<typeof getSubscriptionParams>;
export type GetSubscriptionRequest = z.infer<typeof getSubscriptionRequest>;
export type GetSubscriptionResponse = z.infer<typeof getSubscriptionResponse>;

/** ******************************************************************************
*  List Subscriptions
******************************************************************************* */

export const listSubscriptionsParams = z.object({});

export const listSubscriptionsRequest = authedServiceRequest.merge(
  z.object({
    params: listSubscriptionsParams,
  }),
);

export const listSubscriptionsResponse = serviceResponse.merge(
  z.object({
    subscriptions: z.array(subscription).optional(),
  }),
);

export type ListSubscriptionsParams = z.infer<typeof listSubscriptionsParams>;
export type ListSubscriptionsRequest = z.infer<typeof listSubscriptionsRequest>;
export type ListSubscriptionsResponse = z.infer<typeof listSubscriptionsResponse>;

/** ******************************************************************************
*  Super Set Subscription Usage Limits
******************************************************************************* */

export const superSetSubscriptionUsageLimitsParams = z.object({
  usageLimits: usage,
  resetCurrentUsage: z.boolean(),
});

export const superSetSubscriptionUsageLimitsRequest = authedServiceRequest.merge(
  z.object({
    params: superSetSubscriptionUsageLimitsParams,
  }),
);

export const superSetSubscriptionUsageLimitsResponse = serviceResponse.merge(
  z.object({
    subscription: subscription.optional(),
    invoice: invoice.optional(),
  }),
);

export type SuperSetSubscriptionUsageLimitsParams = z.infer<typeof superSetSubscriptionUsageLimitsParams>;
export type SuperSetSubscriptionUsageLimitsRequest = z.infer<typeof superSetSubscriptionUsageLimitsRequest>;
export type SuperSetSubscriptionUsageLimitsResponse = z.infer<typeof superSetSubscriptionUsageLimitsResponse>;
