import z from 'zod';
import {
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';

export const file = z.object({
  _id: z.string(),
  name: z.string(),
  mimetype: z.string(),
  encoding: z.string(),
  sizeBytes: z.number().optional(),
  durationSeconds: z.number().optional(),
  url: z.string(),
  meta: metadata,
});

export type File = z.infer<typeof file>;

export interface FileService {
  create(request: CreateFileRequest): Promise<CreateFileResponse>;
  createFromUrl(request: CreateFromUrlRequest): Promise<CreateFromUrlResponse>;
  createFromYouTube(request: CreateFileFromYouTubeRequest): Promise<CreateFileFromYouTubeResponse>;
  get(request: GetFileRequest): Promise<GetFileResponse>;
  getByUrl(request: GetFileByURLRequest): Promise<GetFileResponse>;
  list(request: ListFilesRequest): Promise<ListFilesResponse>;
}

/** ******************************************************************************
*  Create File
******************************************************************************* */

export const createFileParams = z.object({
  name: z.string(),
  mimetype: z.string(),
  encoding: z.string(),
  sizeBytes: z.number().optional(),
  durationSeconds: z.number().optional(),
  buffer: z.instanceof(Buffer).optional(),
});

export const createFileRequest = serviceRequest.merge(
  z.object({
    params: createFileParams,
  }),
);

export const createFileResponse = serviceResponse.merge(
  z.object({
    file: file.optional(),
    uploadUrl: z.string().optional(),
  }),
);

export type CreateFileParams = z.infer<typeof createFileParams>;
export type CreateFileRequest = z.infer<typeof createFileRequest>;
export type CreateFileResponse = z.infer<typeof createFileResponse>;

/** ******************************************************************************
*  Create From Url
******************************************************************************* */

export const creatFromUrlParams = z.object({
  url: z.string(),
});

export const creatFromUrlRequest = serviceRequest.merge(
  z.object({
    params: creatFromUrlParams,
  }),
);

export const creatFromUrlResponse = serviceResponse.merge(
  z.object({
    file: file.optional(),
  }),
);

export type CreateFromUrlParams = z.infer<typeof creatFromUrlParams>;
export type CreateFromUrlRequest = z.infer<typeof creatFromUrlRequest>;
export type CreateFromUrlResponse = z.infer<typeof creatFromUrlResponse>;

/** ******************************************************************************
*  Create File From YouTube
******************************************************************************* */

export const createFileFromYouTubeParams = z.object({
  youtubeUrl: z.string(),
});

export const createFileFromYouTubeRequest = serviceRequest.merge(
  z.object({
    params: createFileFromYouTubeParams,
  }),
);

export const createFileFromYouTubeResponse = serviceResponse.merge(
  z.object({
    file: file.optional(),
  }),
);

export type CreateFileFromYouTubeParams = z.infer<typeof createFileFromYouTubeParams>;
export type CreateFileFromYouTubeRequest = z.infer<typeof createFileFromYouTubeRequest>;
export type CreateFileFromYouTubeResponse = z.infer<typeof createFileFromYouTubeResponse>;

/** ******************************************************************************
*  Get File
******************************************************************************* */

export const getFileParams = z.object({
  fileId: z.string(),
});

export const getFileRequest = serviceRequest.merge(
  z.object({
    params: getFileParams,
  }),
);

export const getFileByURLParams = z.object({
  url: z.string(),
});

export const getFileByURLRequest = serviceRequest.merge(
  z.object({
    params: getFileByURLParams,
  }),
);

export const getFileResponse = serviceResponse.merge(
  z.object({
    file: file.optional().nullable(),
  }),
);

export type GetFileParams = z.infer<typeof getFileParams>;
export type GetFileRequest = z.infer<typeof getFileRequest>;
export type GetFileByURLParams = z.infer<typeof getFileByURLParams>;
export type GetFileByURLRequest = z.infer<typeof getFileByURLRequest>;
export type GetFileResponse = z.infer<typeof getFileResponse>;

/** ******************************************************************************
*  List Files
******************************************************************************* */

export const listFilesParams = z.object({
  fileIds: z.array(z.string()),
});

export const listFilesRequest = serviceRequest.merge(
  z.object({
    params: listFilesParams,
  }),
);

export const listFilesResponse = serviceResponse.merge(
  z.object({
    files: z.array(file).optional(),
  }),
);

export type ListFilesParams = z.infer<typeof listFilesParams>;
export type ListFilesRequest = z.infer<typeof listFilesRequest>;
export type ListFilesResponse = z.infer<typeof listFilesResponse>;
