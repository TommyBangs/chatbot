import z from 'zod';
import {
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { source } from './SourceService';
import { organization } from './OrganizationService';

export interface EmailService {
  /* Source */
  sendSourceCreated(request: SendSourceCreatedEmailRequest):Promise<SendSourceCreatedEmailResponse>;
  sendSourceImported(request: SendSourceImportedEmailRequest): Promise<SendSourceImportedEmailResponse>;
  /* Organization */
  sendInviteToOrganization(request: SendInviteToOrganizationEmailRequest): Promise<SendInviteToOrganizationEmailResponse>;
}

/** ******************************************************************************
*  Send Source Created Email
******************************************************************************* */

export const sendSourceCreatedEmailParams = z.object({
  toAddress: z.string(),
  source,
});

export const sendSourceCreatedEmailRequest = serviceRequest.merge(
  z.object({
    params: sendSourceCreatedEmailParams,
  }),
);

export const sendSourceCreatedEmailResponse = serviceResponse.merge(
  z.object({
    success: z.boolean().optional(),
  }),
);

export type SendSourceCreatedEmailParams = z.infer<typeof sendSourceCreatedEmailParams>;
export type SendSourceCreatedEmailRequest = z.infer<typeof sendSourceCreatedEmailRequest>;
export type SendSourceCreatedEmailResponse = z.infer<typeof sendSourceCreatedEmailResponse>;

/** ******************************************************************************
*  Send Source Imported Email
******************************************************************************* */

export const sendSourceImportedEmailParams = z.object({
  toAddress: z.string(),
  source,
});

export const sendSourceImportedEmailRequest = serviceRequest.merge(
  z.object({
    params: sendSourceImportedEmailParams,
  }),
);

export const sendSourceImportedEmailResponse = serviceResponse.merge(
  z.object({
    success: z.boolean().optional(),
  }),
);

export type SendSourceImportedEmailParams = z.infer<typeof sendSourceImportedEmailParams>;
export type SendSourceImportedEmailRequest = z.infer<typeof sendSourceImportedEmailRequest>;
export type SendSourceImportedEmailResponse = z.infer<typeof sendSourceImportedEmailResponse>;

/** ******************************************************************************
*  Send Invite  to Organization
******************************************************************************* */

export const sendInviteToOrganizationEmailParams = z.object({
  toAddress: z.string(),
  inviteeExists: z.boolean(),
  inviterFirstName: z.string(),
  inviterLastName: z.string(),
  organization,
});

export const sendInviteToOrganizationEmailRequest = serviceRequest.merge(
  z.object({
    params: sendInviteToOrganizationEmailParams,
  }),
);

export const sendInviteToOrganizationEmailResponse = serviceResponse.merge(
  z.object({
    success: z.boolean().optional(),
  }),
);

export type SendInviteToOrganizationEmailParams = z.infer<typeof sendInviteToOrganizationEmailParams>;
export type SendInviteToOrganizationEmailRequest = z.infer<typeof sendInviteToOrganizationEmailRequest>;
export type SendInviteToOrganizationEmailResponse = z.infer<typeof sendInviteToOrganizationEmailResponse>;
