import z from 'zod';
import {
  authedServiceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';
import { user } from './UserService';
import { role } from './RoleService';

export const organization = z.object({
  _id: z.string(),
  stripeCustomerId: z.string(),
  userId: z.string(),
  name: z.string(),
  imageFileId: z.string().nullable(),
  description: z.string().nullable(),
  meta: metadata,
});

export type Organization = z.infer<typeof organization>;

export interface OrganizationService {
  create(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
  edit(request: EditOrganizationRequest): Promise<EditOrganizationResponse>;
  get(request: GetOrganizationRequest): Promise<GetOrganizationResponse>;
  list(request: ListOrganizationsRequest): Promise<ListOrganizationsResponse>;
  users(request: ListOrganizationUsersRequest): Promise<ListOrganizationUsersResponse>;
  superList(request: SuperListOrganizationsRequest): Promise<SuperListOrganizationsResponse>;
  superSetOwner(request: SuperSetOrganizationOwnerRequest): Promise<SuperSetOrganizationOwnerResponse>;
}

/** ******************************************************************************
*  Create Organization
******************************************************************************* */

export const createOrganizationParams = z.object({
  stripeCustomerId: z.string().optional(),
  name: z.string(),
  imageFileId: z.string().nullable(),
  description: z.string().nullable(),
});

export const createOrganizationRequest = authedServiceRequest.merge(
  z.object({
    params: createOrganizationParams,
  }),
);

export const createOrganizationResponse = serviceResponse.merge(
  z.object({
    organization: organization.optional(),
  }),
);

export type CreateOrganizationParams = z.infer<typeof createOrganizationParams>;
export type CreateOrganizationRequest = z.infer<typeof createOrganizationRequest>;
export type CreateOrganizationResponse = z.infer<typeof createOrganizationResponse>;

/** ******************************************************************************
*  Edit Organization
******************************************************************************* */

export const editOrganizationParams = z.object({
  _id: z.string(),
  name: z.string(),
  imageFileId: z.string().nullable(),
  description: z.string().nullable(),
});

export const editOrganizationRequest = authedServiceRequest.merge(
  z.object({
    params: editOrganizationParams,
  }),
);

export const editOrganizationResponse = serviceResponse.merge(
  z.object({
    organization: organization.optional(),
  }),
);

export type EditOrganizationParams = z.infer<typeof editOrganizationParams>;
export type EditOrganizationRequest = z.infer<typeof editOrganizationRequest>;
export type EditOrganizationResponse = z.infer<typeof editOrganizationResponse>;

/** ******************************************************************************
*  Get Organization
******************************************************************************* */

export const getOrganizationParams = z.object({});

export const getOrganizationRequest = authedServiceRequest.merge(
  z.object({
    params: getOrganizationParams,
  }),
);

export const getOrganizationResponse = serviceResponse.merge(
  z.object({
    organization: organization.optional(),
  }),
);

export type GetOrganizationParams = z.infer<typeof getOrganizationParams>;
export type GetOrganizationRequest = z.infer<typeof getOrganizationRequest>;
export type GetOrganizationResponse = z.infer<typeof getOrganizationResponse>;

/** ******************************************************************************
*  List Organizations
******************************************************************************* */

export const listOrganizationsParams = z.object({
  _ids: z.array(z.string()),
});

export const listOrganizationsRequest = authedServiceRequest.merge(
  z.object({
    params: listOrganizationsParams,
  }),
);

export const listOrganizationsResponse = serviceResponse.merge(
  z.object({
    organizations: z.array(organization).optional(),
  }),
);

export type ListOrganizationsParams = z.infer<typeof listOrganizationsParams>;
export type ListOrganizationsRequest = z.infer<typeof listOrganizationsRequest>;
export type ListOrganizationsResponse = z.infer<typeof listOrganizationsResponse>;

/** ******************************************************************************
*  List Organization Users
******************************************************************************* */

export const listOrganizationUsersParams = z.object({});

export const listOrganizationUsersRequest = authedServiceRequest.merge(
  z.object({
    params: listOrganizationUsersParams,
  }),
);

export const listOrganizationUsersResponse = serviceResponse.merge(
  z.object({
    users: z.array(user).optional(),
  }),
);

export type ListOrganizationUsersParams = z.infer<typeof listOrganizationUsersParams>;
export type ListOrganizationUsersRequest = z.infer<typeof listOrganizationUsersRequest>;
export type ListOrganizationUsersResponse = z.infer<typeof listOrganizationUsersResponse>;

/** ******************************************************************************
*  Super List Organizations
******************************************************************************* */

export const superListOrganizationsParams = z.object({});

export const superListOrganizationsRequest = authedServiceRequest.merge(
  z.object({
    params: superListOrganizationsParams,
  }),
);

export const superListOrganizationsResponse = serviceResponse.merge(
  z.object({
    organizations: z.array(organization).optional(),
  }),
);

export type SuperListOrganizationsParams = z.infer<typeof superListOrganizationsParams>;
export type SuperListOrganizationsRequest = z.infer<typeof superListOrganizationsRequest>;
export type SuperListOrganizationsResponse = z.infer<typeof superListOrganizationsResponse>;

/** ******************************************************************************
*  Super Set Organization Owner
******************************************************************************* */

export const superSetOrganizationOwnerParams = z.object({
  userId: z.string(),
});

export const superSetOrganizationOwnerRequest = authedServiceRequest.merge(
  z.object({
    params: superSetOrganizationOwnerParams,
  }),
);

export const superSetOrganizationOwnerResponse = serviceResponse.merge(
  z.object({
    organization: organization.optional(),
    role: role.optional(),
  }),
);

export type SuperSetOrganizationOwnerParams = z.infer<typeof superSetOrganizationOwnerParams>;
export type SuperSetOrganizationOwnerRequest = z.infer<typeof superSetOrganizationOwnerRequest>;
export type SuperSetOrganizationOwnerResponse = z.infer<typeof superSetOrganizationOwnerResponse>;
