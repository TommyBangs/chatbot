import z from 'zod';
import { updateUsage, usage } from '../interfaces/Usage';
import {
  authedServiceRequest,
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';

export const zInvoiceStatus = z.enum(['Pending', 'Fulfilled', 'Canceled', 'Failed']);

export const invoice = z.object({
  _id: z.string(),
  organizationId: z.string(),
  subscriptionId: z.string(),
  stripeCustomerId: z.string(),
  stripeSubscriptionId: z.string().nullable(),
  stripeInvoiceId: z.string().nullable(),
  stripeProductId: z.string().nullable(),
  stripePriceId: z.string().nullable(),
  status: zInvoiceStatus,
  usage,
  usageLimits: usage,
  meta: metadata,
});

export type Invoice = z.infer<typeof invoice>;
export type InvoiceUsage = z.infer<typeof usage>;

export interface InvoiceService {
  create(request: CreateInvoiceRequest): Promise<CreateInvoiceResponse>;
  updateLatest(request: UpdateLatestInvoiceRequest): Promise<UpdateLatestInvoiceResponse>;
  latest(request: LatestInvoiceRequest): Promise<LatestInvoiceResponse>;
  get(request: GetInvoiceRequest): Promise<GetInvoiceResponse>;
  list(request: ListInvoicesRequest): Promise<ListInvoicesResponse>;
  superSetUsageLimits(request: SuperSetInvoiceUsageLimitsRequest): Promise<SuperSetInvoiceUsageLimitsResponse>;
}

/** ******************************************************************************
*  Create Invoice
******************************************************************************* */

export const createInvoiceParams = z.object({
  stripeInvoiceId: z.string().nullable(),
  status: zInvoiceStatus,
});

export const createInvoiceRequest = authedServiceRequest.merge(
  z.object({
    params: createInvoiceParams,
  }),
);

export const createInvoiceResponse = serviceResponse.merge(
  z.object({
    invoice: invoice.optional(),
  }),
);

export type CreateInvoiceParams = z.infer<typeof createInvoiceParams>;
export type CreateInvoiceRequest = z.infer<typeof createInvoiceRequest>;
export type CreateInvoiceResponse = z.infer<typeof createInvoiceResponse>;

/** ******************************************************************************
*  Update Latest Invoice
******************************************************************************* */

export const updateLatestInvoiceParams = z.object({
  organizationId: z.string(),
  usageDiff: updateUsage.optional(),
});

export const updateLatestInvoiceRequest = serviceRequest.merge(
  z.object({
    params: updateLatestInvoiceParams,
  }),
);

export const updateLatestInvoiceResponse = serviceResponse.merge(
  z.object({
    invoice: invoice.optional(),
  }),
);

export type UpdateLatestInvoiceParams = z.infer<typeof updateLatestInvoiceParams>;
export type UpdateLatestInvoiceRequest = z.infer<typeof updateLatestInvoiceRequest>;
export type UpdateLatestInvoiceResponse = z.infer<typeof updateLatestInvoiceResponse>;

/** ******************************************************************************
*  Get Latest Invoice
******************************************************************************* */

export const latestInvoiceParams = z.object({});

export const latestInvoiceRequest = authedServiceRequest.merge(
  z.object({
    params: latestInvoiceParams,
  }),
);

export const latestInvoiceResponse = serviceResponse.merge(
  z.object({
    invoice: invoice.optional(),
  }),
);

export type LatestInvoiceParams = z.infer<typeof latestInvoiceParams>;
export type LatestInvoiceRequest = z.infer<typeof latestInvoiceRequest>;
export type LatestInvoiceResponse = z.infer<typeof latestInvoiceResponse>;

/** ******************************************************************************
*  Get Invoice
******************************************************************************* */

export const getInvoiceParams = z.object({
  invoiceId: z.string(),
});

export const getInvoiceRequest = authedServiceRequest.merge(
  z.object({
    params: getInvoiceParams,
  }),
);

export const getInvoiceResponse = serviceResponse.merge(
  z.object({
    invoice: invoice.nullable().optional(),
  }),
);

export type GetInvoiceParams = z.infer<typeof getInvoiceParams>;
export type GetInvoiceRequest = z.infer<typeof getInvoiceRequest>;
export type GetInvoiceResponse = z.infer<typeof getInvoiceResponse>;

/** ******************************************************************************
*  List Invoices
******************************************************************************* */

export const listInvoicesParams = z.object({});

export const listInvoicesRequest = authedServiceRequest.merge(
  z.object({
    params: listInvoicesParams,
  }),
);

export const listInvoicesResponse = serviceResponse.merge(
  z.object({
    invoices: z.array(invoice).optional(),
  }),
);

export type ListInvoicesParams = z.infer<typeof listInvoicesParams>;
export type ListInvoicesRequest = z.infer<typeof listInvoicesRequest>;
export type ListInvoicesResponse = z.infer<typeof listInvoicesResponse>;

/** ******************************************************************************
*  Super Set invoice Usage Limits
******************************************************************************* */

export const superSetInvoiceUsageLimitsParams = z.object({
  usageLimits: usage,
  resetCurrentUsage: z.boolean(),
});

export const superSetInvoiceUsageLimitsRequest = authedServiceRequest.merge(
  z.object({
    params: superSetInvoiceUsageLimitsParams,
  }),
);

export const superSetInvoiceUsageLimitsResponse = serviceResponse.merge(
  z.object({
    invoice: invoice.optional(),
  }),
);

export type SuperSetInvoiceUsageLimitsParams = z.infer<typeof superSetInvoiceUsageLimitsParams>;
export type SuperSetInvoiceUsageLimitsRequest = z.infer<typeof superSetInvoiceUsageLimitsRequest>;
export type SuperSetInvoiceUsageLimitsResponse = z.infer<typeof superSetInvoiceUsageLimitsResponse>;
