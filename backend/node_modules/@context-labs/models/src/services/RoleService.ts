import z from 'zod';
import {
  authedServiceRequest,
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';

export const zRoleTypes = z.enum([
  'Owner',
  'Member',
]);

export const role = z.object({
  _id: z.string(),
  organizationId: z.string(),
  userId: z.string().nullable(),
  userEmail: z.string().nullable(),
  type: zRoleTypes,
  acceptedAt: z.number().nullable(),
  meta: metadata,
});

export type Role = z.infer<typeof role>;
export type RoleTypes = z.infer<typeof zRoleTypes>;

export interface RoleService {
  create(request: CreateRoleRequest): Promise<CreateRoleResponse>;
  delete(request: DeleteRoleRequest): Promise<DeleteRoleResponse>;
  accept(request: AcceptRoleRequest): Promise<AcceptRoleResponse>;
  assign(request: AssignRolesRequest): Promise<AssignRolesResponse>;
  get(request: GetRoleRequest): Promise<GetRoleResponse>;
  list(request: ListRolesRequest): Promise<ListRolesResponse>;
  superAssignOwner(request: SuperAssignOwnerRoleRequest): Promise<SuperAssignOwnerRoleResponse>;
}

/** ******************************************************************************
*  Create Role
******************************************************************************* */

export const createRoleParams = z.object({
  userId: z.string().nullable().optional(),
  userEmail: z.string().nullable().optional(),
  type: zRoleTypes,
});

export const createRoleRequest = authedServiceRequest.merge(
  z.object({
    params: createRoleParams,
  }),
);

export const createRoleResponse = serviceResponse.merge(
  z.object({
    role: role.optional(),
    user: z.any().optional(),
  }),
);

export type CreateRoleParams = z.infer<typeof createRoleParams>;
export type CreateRoleRequest = z.infer<typeof createRoleRequest>;
export type CreateRoleResponse = z.infer<typeof createRoleResponse>;

/** ******************************************************************************
*  Delete Role
******************************************************************************* */

export const deleteRoleParams = z.object({
  _id: z.string(),
});

export const deleteRoleRequest = authedServiceRequest.merge(
  z.object({
    params: deleteRoleParams,
  }),
);

export const deleteRoleResponse = serviceResponse.merge(
  z.object({
    _id: z.string().optional(),
    success: z.boolean().optional(),
  }),
);

export type DeleteRoleParams = z.infer<typeof deleteRoleParams>;
export type DeleteRoleRequest = z.infer<typeof deleteRoleRequest>;
export type DeleteRoleResponse = z.infer<typeof deleteRoleResponse>;

/** ******************************************************************************
*  Accept Role
******************************************************************************* */

export const acceptRoleParams = z.object({
  _id: z.string(),
  accept: z.boolean(),
});

export const acceptRoleRequest = authedServiceRequest.merge(
  z.object({
    params: acceptRoleParams,
  }),
);

export const acceptRoleResponse = serviceResponse.merge(
  z.object({
    role: role.nullable().optional(),
  }),
);

export type AcceptRoleParams = z.infer<typeof acceptRoleParams>;
export type AcceptRoleRequest = z.infer<typeof acceptRoleRequest>;
export type AcceptRoleResponse = z.infer<typeof acceptRoleResponse>;

/** ******************************************************************************
*  Assign Roles
******************************************************************************* */

export const assignRolesParams = z.object({
  userEmail: z.string(),
  userId: z.string(),
});

export const assignRolesRequest = serviceRequest.merge(
  z.object({
    params: assignRolesParams,
  }),
);

export const assignRolesResponse = serviceResponse.merge(
  z.object({
    roles: z.array(role).optional(),
  }),
);

export type AssignRolesParams = z.infer<typeof assignRolesParams>;
export type AssignRolesRequest = z.infer<typeof assignRolesRequest>;
export type AssignRolesResponse = z.infer<typeof assignRolesResponse>;

/** ******************************************************************************
*  Get Role
******************************************************************************* */

export const getRoleParams = z.object({
  roleId: z.string(),
});

export const getRoleRequest = serviceRequest.merge(
  z.object({
    params: getRoleParams,
  }),
);

export const getRoleResponse = serviceResponse.merge(
  z.object({
    role: role.nullable().optional(),
  }),
);

export type GetRoleParams = z.infer<typeof getRoleParams>;
export type GetRoleRequest = z.infer<typeof getRoleRequest>;
export type GetRoleResponse = z.infer<typeof getRoleResponse>;

/** ******************************************************************************
*  List Roles
******************************************************************************* */

export const listRolesParams = z.object({});

export const listRolesRequest = authedServiceRequest.merge(
  z.object({
    params: listRolesParams,
  }),
);

export const listRolesResponse = serviceResponse.merge(
  z.object({
    user: z.array(role).optional(),
    organization: z.array(role).optional(),
  }),
);

export type ListRolesParams = z.infer<typeof listRolesParams>;
export type ListRolesRequest = z.infer<typeof listRolesRequest>;
export type ListRolesResponse = z.infer<typeof listRolesResponse>;

/** ******************************************************************************
*  Super Assign Owner Role
******************************************************************************* */

export const superAssignOwnerRoleParams = z.object({
  userId: z.string(),
});

export const superAssignOwnerRoleRequest = authedServiceRequest.merge(
  z.object({
    params: superAssignOwnerRoleParams,
  }),
);

export const superAssignOwnerRoleResponse = serviceResponse.merge(
  z.object({
    role: role.optional(),
  }),
);

export type SuperAssignOwnerRoleParams = z.infer<typeof superAssignOwnerRoleParams>;
export type SuperAssignOwnerRoleRequest = z.infer<typeof superAssignOwnerRoleRequest>;
export type SuperAssignOwnerRoleResponse = z.infer<typeof superAssignOwnerRoleResponse>;
