import z from 'zod';
import {
  authedServiceRequest,
  authToken,
  serviceRequest,
  serviceResponse,
} from '../interfaces/common';
import { metadata } from '../interfaces/Metadata';
import { role } from './RoleService';
import { organization } from './OrganizationService';

export const user = z.object({
  _id: z.string(),
  organizationId: z.string(),
  email: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  passwordHash: z.string(),
  meta: metadata,
});

export const authenticationResponse = serviceResponse.merge(z.object({
  user: user.optional(),
  organization: organization.optional(),
  token: authToken.optional(),
  roles: z.array(role).optional(),
}));

export type User = z.infer<typeof user>;
export type AuthenticationResponse = z.infer<typeof authenticationResponse>;

export interface UserService {
  register(request: RegisterUserRequest): Promise<RegisterUserResponse>;
  login(request: LoginUserRequest): Promise<LoginUserResponse>;
  oAuthLogin(request: OAuthLoginUserRequest): Promise<OAuthLoginUserResponse>;
  setOrganization(request: SetUserOrganizationRequest): Promise<SetUserOrganizationResponse>;
  get(request: GetUserRequest): Promise<GetUserResponse>;
  byEmail(request: GetUserByEmailRequest): Promise<GetUserByEmailResponse>;
  list(request: ListUsersRequest): Promise<ListUsersResponse>;
  organizations(request: ListUserOrganizationsRequest): Promise<ListUserOrganizationsResponse>;
  superList(request: SuperListUsersRequest): Promise<SuperListUsersResponse>;
}

/** ******************************************************************************
*  Register User
******************************************************************************* */

export const registerUserParams = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string().email(),
  password: z.string(),
});

export const registerUserRequest = serviceRequest.merge(
  z.object({
    params: registerUserParams,
  }),
);

export const registerUserResponse = authenticationResponse;

export type RegisterUserParams = z.infer<typeof registerUserParams>;
export type RegisterUserRequest = z.infer<typeof registerUserRequest>;
export type RegisterUserResponse = z.infer<typeof registerUserResponse>;

/** ******************************************************************************
*  Login User
******************************************************************************* */

export const loginUserParams = z.object({
  email: z.string().email(),
  password: z.string(),
});

export const loginUserRequest = serviceRequest.merge(
  z.object({
    params: loginUserParams,
  }),
);

export const loginUserResponse = authenticationResponse;

export type LoginUserParams = z.infer<typeof loginUserParams>;
export type LoginUserRequest = z.infer<typeof loginUserRequest>;
export type LoginUserResponse = z.infer<typeof loginUserResponse>;

/** ******************************************************************************
*  OAuth Login User
******************************************************************************* */

export const oAuthloginUserParams = z.object({
  email: z.string().email(),
});

export const oAuthloginUserRequest = serviceRequest.merge(
  z.object({
    params: oAuthloginUserParams,
  }),
);

export const oAuthloginUserResponse = authenticationResponse;

export type OAuthLoginUserParams = z.infer<typeof oAuthloginUserParams>;
export type OAuthLoginUserRequest = z.infer<typeof oAuthloginUserRequest>;
export type OAuthLoginUserResponse = z.infer<typeof oAuthloginUserResponse>;

/** ******************************************************************************
*  Set Organization
******************************************************************************* */

export const setUserOrganizationParams = z.object({
  organizationId: z.string(),
});

export const setUserOrganizationRequest = authedServiceRequest.merge(
  z.object({
    params: setUserOrganizationParams,
  }),
);

export const setUserOrganizationResponse = authenticationResponse;

export type SetUserOrganizationParams = z.infer<typeof setUserOrganizationParams>;
export type SetUserOrganizationRequest = z.infer<typeof setUserOrganizationRequest>;
export type SetUserOrganizationResponse = z.infer<typeof setUserOrganizationResponse>;

/** ******************************************************************************
*  Get User
******************************************************************************* */

export const getUserParams = z.object({});

export const getUserRequest = authedServiceRequest.merge(
  z.object({
    params: getUserParams,
  }),
);

export const getUserResponse = serviceResponse.merge(
  z.object({
    user: user.optional(),
  }),
);

export type GetUserParams = z.infer<typeof getUserParams>;
export type GetUserRequest = z.infer<typeof getUserRequest>;
export type GetUserResponse = z.infer<typeof getUserResponse>;

/** ******************************************************************************
*  Get User By Email
******************************************************************************* */

export const getUserByEmailParams = z.object({
  userEmail: z.string(),
});

export const getUserByEmailRequest = serviceRequest.merge(
  z.object({
    params: getUserByEmailParams,
  }),
);

export const getUserByEmailResponse = serviceResponse.merge(
  z.object({
    user: user.nullable().optional(),
  }),
);

export type GetUserByEmailParams = z.infer<typeof getUserByEmailParams>;
export type GetUserByEmailRequest = z.infer<typeof getUserByEmailRequest>;
export type GetUserByEmailResponse = z.infer<typeof getUserByEmailResponse>;

/** ******************************************************************************
*  List Users
******************************************************************************* */

export const listUsersParams = z.object({
  _ids: z.array(z.string()),
});

export const listUsersRequest = authedServiceRequest.merge(
  z.object({
    params: listUsersParams,
  }),
);

export const listUsersResponse = serviceResponse.merge(
  z.object({
    users: z.array(user).optional(),
  }),
);

export type ListUsersParams = z.infer<typeof listUsersParams>;
export type ListUsersRequest = z.infer<typeof listUsersRequest>;
export type ListUsersResponse = z.infer<typeof listUsersResponse>;

/** ******************************************************************************
*  List Users
******************************************************************************* */

export const listUserOrganizationsParams = z.object({});

export const listUserOrganizationsRequest = authedServiceRequest.merge(
  z.object({
    params: listUserOrganizationsParams,
  }),
);

export const listUserOrganizationsResponse = serviceResponse.merge(
  z.object({
    organizations: z.array(organization).optional(),
  }),
);

export type ListUserOrganizationsParams = z.infer<typeof listUserOrganizationsParams>;
export type ListUserOrganizationsRequest = z.infer<typeof listUserOrganizationsRequest>;
export type ListUserOrganizationsResponse = z.infer<typeof listUserOrganizationsResponse>;

/** ******************************************************************************
*  Super List Users
******************************************************************************* */

export const superListUsersParams = z.object({});

export const superListUsersRequest = authedServiceRequest.merge(
  z.object({
    params: superListUsersParams,
  }),
);

export const superListUsersResponse = serviceResponse.merge(
  z.object({
    users: z.array(user).optional(),
  }),
);

export type SuperListUsersParams = z.infer<typeof superListUsersParams>;
export type SuperListUsersRequest = z.infer<typeof superListUsersRequest>;
export type SuperListUsersResponse = z.infer<typeof superListUsersResponse>;
