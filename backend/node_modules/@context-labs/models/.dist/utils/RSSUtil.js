"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const rss_parser_1 = __importDefault(require("rss-parser"));
const rss = new rss_parser_1.default();
const parse = (url) => __awaiter(void 0, void 0, void 0, function* () {
    return yield rss.parseURL(url);
});
function getPosition(value, sub, index) {
    const result = value.split(sub, index).join(sub).length;
    return result < value.length ? result : -1;
}
/**
 * Can handle hh:mm:ss, or mm:ss, or ss
 */
const convertDurationToSeconds = (duration) => {
    const firstColon = getPosition(duration, ':', 1);
    const secondColon = getPosition(duration, ':', 2);
    if (firstColon === -1)
        return Number(duration);
    if (secondColon === -1) {
        const minutes = Number(duration.substring(0, firstColon));
        const seconds = Number(duration.substring(firstColon + 1));
        return (minutes * 60) + seconds;
    }
    const hours = Number(duration.substring(0, firstColon));
    const minutes = Number(duration.substring(firstColon + 1, secondColon));
    const seconds = Number(duration.substring(secondColon + 1));
    return (hours * 60 * 60) + (minutes * 60) + seconds;
};
const durationSeconds = (items) => {
    return items
        .map((item) => {
        var _a, _b;
        const seconds = convertDurationToSeconds((_b = (_a = item === null || item === void 0 ? void 0 : item.itunes) === null || _a === void 0 ? void 0 : _a.duration) !== null && _b !== void 0 ? _b : '0');
        return seconds;
    })
        .reduce((c, n) => c + n, 0);
};
const durationHours = (items) => {
    const seconds = durationSeconds(items);
    return seconds > 0 ? Math.ceil(seconds / 3600) : 0;
};
const transcriptionCost = (items) => {
    const hours = durationHours(items);
    return hours * 0.5 * 100;
};
const RSSUtil = {
    parse,
    durationSeconds,
    durationHours,
    transcriptionCost,
};
exports.default = RSSUtil;
//# sourceMappingURL=RSSUtil.js.map