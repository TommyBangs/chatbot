import RSSParser from 'rss-parser';
export type PodcastFeed = {
    image: {
        url: string;
        title: string;
    };
    paginationLinks: {
        self: string;
    };
    title: string;
    description: string;
    pubDate: string;
    generator: string;
    language: string;
    copyright: string;
    lastBuildDate: string;
    itunes: {
        owner: {
            name: string;
        };
        image: string;
        categories: string[];
        categoriesWithSubs: {
            name: string;
            subs: [{
                name: string;
            }];
        }[];
        keywords: string[];
        author: string;
        subtitle: string;
        summary: string;
        explicit: string;
    };
    siteUrl: string;
};
export type PodcastItem = {
    creator: string;
    title: string;
    link: string;
    pubDate: string;
    author: string;
    'document:encoded': string;
    'document:encodedSnippet': string;
    enclosure: {
        url: string;
        length: string;
        type: string;
    };
    document: string;
    documentSnippet: string;
    guid: string;
    isoDate: string;
    itunes: {
        author: string;
        subtitle: string;
        summary: string;
        explicit: string;
        duration: string;
        image: string;
        episode: string;
        keywords: string;
    };
};
export type Podcast = PodcastFeed & RSSParser.Output<PodcastItem>;
declare const RSSUtil: {
    parse: (url: string) => Promise<Podcast>;
    durationSeconds: (items: PodcastItem[]) => number;
    durationHours: (items: PodcastItem[]) => number;
    transcriptionCost: (items: PodcastItem[]) => number;
};
export default RSSUtil;
