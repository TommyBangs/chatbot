"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const luxon_1 = require("luxon");
const DEFAULT_TIMEZONE = 'Etc/UTC';
const currentBrowserTimezone = () => {
    return Intl.DateTimeFormat().resolvedOptions().timeZone;
};
const now = (timezone = DEFAULT_TIMEZONE) => {
    return luxon_1.DateTime.fromMillis(luxon_1.DateTime.now().toMillis(), { zone: timezone }).toMillis();
};
const fromNow = (millis, timezone = DEFAULT_TIMEZONE) => {
    if (typeof millis === 'string')
        millis = Number(millis);
    return now(timezone) + millis;
};
const date = (millis, timezone = DEFAULT_TIMEZONE) => {
    if (typeof millis === 'string')
        millis = Number(millis);
    return luxon_1.DateTime.fromMillis(millis, { zone: timezone });
};
/**
 * https://moment.github.io/luxon/#/formatting?id=table-of-tokens
 */
const format = (millis, format = 'DD', timezone = DEFAULT_TIMEZONE) => {
    if (typeof millis === 'string')
        millis = Number(millis);
    return date(millis, timezone).toFormat(format);
};
const ago = (millis, timezone = DEFAULT_TIMEZONE) => {
    const now = luxon_1.DateTime.fromMillis(luxon_1.DateTime.now().toMillis(), { zone: timezone });
    const inputDate = date(millis);
    const diff = now.diff(inputDate, ['years', 'months', 'days', 'hours', 'minutes', 'seconds']);
    const diffRounded = diff.toObject();
    if (diffRounded.years) {
        return `${Math.floor(diffRounded.years)} year${diffRounded.years > 1 ? 's' : ''} ago`;
    }
    if (diffRounded.months) {
        return `${Math.floor(diffRounded.months)} month${diffRounded.months > 1 ? 's' : ''} ago`;
    }
    if (diffRounded.days) {
        return `${Math.floor(diffRounded.days)} day${diffRounded.days > 1 ? 's' : ''} ago`;
    }
    if (diffRounded.hours) {
        return `${Math.floor(diffRounded.hours)} hour${diffRounded.hours > 1 ? 's' : ''} ago`;
    }
    if (diffRounded.minutes) {
        return `${Math.floor(diffRounded.minutes)} minute${diffRounded.minutes > 1 ? 's' : ''} ago`;
    }
    return `${Math.floor(diffRounded.seconds || 0)} second${diffRounded.seconds || 0 > 1 ? 's' : ''} ago`;
};
const TimeUtil = {
    currentBrowserTimezone,
    now,
    fromNow,
    date,
    format,
    ago,
};
exports.default = TimeUtil;
//# sourceMappingURL=TimeUtil.js.map