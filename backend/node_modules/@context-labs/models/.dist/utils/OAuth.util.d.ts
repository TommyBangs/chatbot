import { z } from 'zod';
import AuthenticationStrategy from '../enums/AuthenticationStrategy';
import { AuthenticationResponse } from '../services/UserService';
/** ******************************************************************************
*  Helpers
******************************************************************************* */
export declare const FRAME_DATA_SOURCE = "use-context";
export declare const authenticationStrategyOAuthPath: (strategy: AuthenticationStrategy) => string;
export declare const fullPath: (path: string) => string;
export declare const buildWindowParams: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    token: z.ZodOptional<z.ZodString>;
    user: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        email: z.ZodString;
        firstName: z.ZodString;
        lastName: z.ZodString;
        passwordHash: z.ZodString;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        email: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        firstName: string;
        lastName: string;
        passwordHash: string;
    }, {
        email: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        firstName: string;
        lastName: string;
        passwordHash: string;
    }>>;
    roles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>, "many">>;
    organization: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        stripeCustomerId: z.ZodString;
        userId: z.ZodString;
        name: z.ZodString;
        imageFileId: z.ZodNullable<z.ZodString>;
        description: z.ZodNullable<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripeCustomerId: string;
        description: string | null;
        imageFileId: string | null;
    }, {
        userId: string;
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripeCustomerId: string;
        description: string | null;
        imageFileId: string | null;
    }>>;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: string;
    token?: string | undefined;
    user?: {
        email: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        firstName: string;
        lastName: string;
        passwordHash: string;
    } | undefined;
    roles?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
    organization?: {
        userId: string;
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripeCustomerId: string;
        description: string | null;
        imageFileId: string | null;
    } | undefined;
    error?: string | undefined;
}, {
    status: string;
    token?: string | undefined;
    user?: {
        email: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        firstName: string;
        lastName: string;
        passwordHash: string;
    } | undefined;
    roles?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
    organization?: {
        userId: string;
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripeCustomerId: string;
        description: string | null;
        imageFileId: string | null;
    } | undefined;
    error?: string | undefined;
}>;
export type BuildWindowParams = z.infer<typeof buildWindowParams>;
export declare const buildOAuthWindowResponse: (params: BuildWindowParams) => string;
/** ******************************************************************************
*  Google
******************************************************************************* */
export declare const GOOGLE_PATH = "/google";
export declare const GOOGLE_CALLBACK_PATH = "/google/callback";
/** ******************************************************************************
*  LinkedIn
******************************************************************************* */
export declare const LINKEDIN_PATH = "/linkedin";
export declare const LINKEDIN_CALLBACK_PATH = "/linkedin/callback";
export type OAuthMessageData = AuthenticationResponse & {
    source: string;
};
export declare const openOAuthWindow: (url: string, name: string) => Promise<OAuthMessageData>;
export declare const closeOAuthWindow: () => boolean;
