"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class MongoConnectionManager {
    constructor(mongoose, mongoConnectionString, username = '', password = '', dbName = '') {
        mongoose.set('strictQuery', false);
        const parsed = new URL(mongoConnectionString);
        if (username)
            parsed.username = username;
        if (password)
            parsed.password = password;
        parsed.pathname = `/${dbName}`;
        this.connected = false;
        this.mongoConnectionStringInternal = parsed.toString();
        // redact username/password from publicly available connection string
        parsed.username = '__user__';
        parsed.password = '__pass__';
        this.mongoConnectionString = parsed.toString();
        this.mongoose = mongoose;
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Attempting to connect to Mongo DB address [${this.mongoConnectionString}]`);
            try {
                yield this.mongoose.connect(this.mongoConnectionStringInternal, {
                    useNewUrlParser: true,
                });
                console.log(`Connected to MongoDB: ${this.mongoConnectionString}`);
                return true;
            }
            catch (e) {
                console.error(`There was an error connecting to MongoDB: ${this.mongoConnectionString}`);
                console.error(e);
                console.error('Exiting...');
                process.exit(1);
                return false;
            }
        });
    }
}
exports.default = MongoConnectionManager;
//# sourceMappingURL=MongoConnectionManager.js.map