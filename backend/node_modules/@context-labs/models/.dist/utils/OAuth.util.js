"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.closeOAuthWindow = exports.openOAuthWindow = exports.LINKEDIN_CALLBACK_PATH = exports.LINKEDIN_PATH = exports.GOOGLE_CALLBACK_PATH = exports.GOOGLE_PATH = exports.buildOAuthWindowResponse = exports.buildWindowParams = exports.fullPath = exports.authenticationStrategyOAuthPath = exports.FRAME_DATA_SOURCE = void 0;
const zod_1 = require("zod");
const AuthenticationStrategy_1 = require("../enums/AuthenticationStrategy");
const env_1 = require("../env");
const UserService_1 = require("../services/UserService");
/** ******************************************************************************
*  Helpers
******************************************************************************* */
exports.FRAME_DATA_SOURCE = 'use-context';
const authenticationStrategyOAuthPath = (strategy) => {
    switch (strategy) {
        // Google
        case AuthenticationStrategy_1.zAuthenticationStrategy.Enum.Google:
            return (0, exports.fullPath)(exports.GOOGLE_PATH);
        // LinkedIn
        case AuthenticationStrategy_1.zAuthenticationStrategy.Enum.LinkedIn:
            return (0, exports.fullPath)(exports.LINKEDIN_PATH);
        default:
            return (0, exports.fullPath)(exports.GOOGLE_PATH);
    }
};
exports.authenticationStrategyOAuthPath = authenticationStrategyOAuthPath;
const fullPath = (path) => `${env_1.API_URL}/oauth${path}`;
exports.fullPath = fullPath;
exports.buildWindowParams = UserService_1.authenticationResponse.merge(zod_1.z.object({
    error: zod_1.z.string().optional(),
}));
const buildOAuthWindowResponse = (params) => {
    const message = JSON.stringify(Object.assign(Object.assign({}, params), { source: exports.FRAME_DATA_SOURCE }));
    const hostWindowJSON = JSON.stringify(env_1.CONTEXT_WEB_UI_URL);
    return `<script>window.opener.postMessage(${message}, ${hostWindowJSON}); </script>`;
};
exports.buildOAuthWindowResponse = buildOAuthWindowResponse;
/** ******************************************************************************
*  Google
******************************************************************************* */
exports.GOOGLE_PATH = '/google';
exports.GOOGLE_CALLBACK_PATH = '/google/callback';
/** ******************************************************************************
*  LinkedIn
******************************************************************************* */
exports.LINKEDIN_PATH = '/linkedin';
exports.LINKEDIN_CALLBACK_PATH = '/linkedin/callback';
/** ******************************************************************************
*  OAuth Window Management
******************************************************************************* */
let windowObjectReference = null;
let previousUrl = null;
const receiveMessage = (event) => {
    var _a, _b;
    if (event.origin !== env_1.API_URL) {
        return null;
    }
    if (((_a = event === null || event === void 0 ? void 0 : event.data) === null || _a === void 0 ? void 0 : _a.source) !== exports.FRAME_DATA_SOURCE) {
        return null;
    }
    return (_b = event === null || event === void 0 ? void 0 : event.data) !== null && _b !== void 0 ? _b : null;
};
let previousEventHandler = null;
const openOAuthWindow = (url, name) => {
    return new Promise((resolve) => {
        if (previousEventHandler) {
            window.removeEventListener('message', previousEventHandler);
            previousEventHandler = null;
        }
        const strWindowFeatures = 'toolbar=no, menubar=no, width=600, height=700, top=100, left=100';
        if (windowObjectReference === null || windowObjectReference.closed) {
            windowObjectReference = window.open(url, name, strWindowFeatures);
        }
        else if (previousUrl !== url) {
            windowObjectReference = window.open(url, name, strWindowFeatures);
            windowObjectReference === null || windowObjectReference === void 0 ? void 0 : windowObjectReference.focus();
        }
        else {
            windowObjectReference.focus();
        }
        previousEventHandler = (event) => {
            const data = receiveMessage(event);
            if ((data === null || data === void 0 ? void 0 : data.user) || (data === null || data === void 0 ? void 0 : data.error)) {
                windowObjectReference === null || windowObjectReference === void 0 ? void 0 : windowObjectReference.close();
                resolve(data);
            }
        };
        window.addEventListener('message', previousEventHandler, false);
        previousUrl = url;
    });
};
exports.openOAuthWindow = openOAuthWindow;
const closeOAuthWindow = () => {
    var _a;
    windowObjectReference === null || windowObjectReference === void 0 ? void 0 : windowObjectReference.close();
    const closed = (_a = windowObjectReference === null || windowObjectReference === void 0 ? void 0 : windowObjectReference.closed) !== null && _a !== void 0 ? _a : true;
    windowObjectReference = null;
    return closed;
};
exports.closeOAuthWindow = closeOAuthWindow;
//# sourceMappingURL=OAuth.util.js.map