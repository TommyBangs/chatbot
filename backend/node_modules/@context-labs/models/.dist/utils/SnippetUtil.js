"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAX_TOKENS_PER_SNIPPET = exports.MIN_TOKENS_PER_SNIPPET = void 0;
/* eslint-disable no-restricted-syntax */
const sha256_browser_1 = require("@aws-crypto/sha256-browser");
const SnippetEdgeUtil_1 = __importDefault(require("./SnippetEdgeUtil"));
/**
 * DO NOT CHANGE THIS VALUE
 *
 * It is used to compute the document segments in the database
 * and will break the embeddings if improperly changed.
 *
 * TODO: Figure out how to safely update the documents without having
 * TODO: to recompute the embeddings
 */
exports.MIN_TOKENS_PER_SNIPPET = 80;
exports.MAX_TOKENS_PER_SNIPPET = 200;
const hash = ({ syncId, documentId, text, startSeconds, }) => __awaiter(void 0, void 0, void 0, function* () {
    const hash = new sha256_browser_1.Sha256();
    const data = `${syncId}:${documentId}:${text}:${startSeconds}`;
    hash.update(data);
    const result = yield hash.digest();
    return Buffer.from(result).toString('base64');
});
const tokensInSnippet = (snippet) => {
    return snippet.text.split(' ').length;
};
const createSnippetParamsFromLines = (lines, document, index, pageNumber) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const startTime = (_a = lines[0]) === null || _a === void 0 ? void 0 : _a.startTime;
    const startSeconds = (_b = lines[0]) === null || _b === void 0 ? void 0 : _b.startSeconds;
    const endTime = (_c = lines[lines.length - 1]) === null || _c === void 0 ? void 0 : _c.endTime;
    const endSeconds = (_d = lines[lines.length - 1]) === null || _d === void 0 ? void 0 : _d.endSeconds;
    const text = lines.filter((line) => Boolean(line.text)).map((line) => line.text).join(' ');
    const snippetHash = yield hash({
        syncId: document.syncId || '',
        documentId: document._id,
        text,
        startSeconds: startSeconds || 0,
    });
    return {
        organizationId: document.organizationId,
        sourceId: document.sourceId,
        syncId: document.syncId || '',
        documentId: document._id,
        title: document.title,
        text,
        type: document.type,
        url: document.url,
        domain: document.domain,
        lang: document.lang,
        index,
        hash: snippetHash,
        startTime,
        startSeconds,
        endTime,
        endSeconds,
        releasedAt: document.releasedAt,
        views: document.views,
        pageNumber,
    };
});
const createSnippetParamsFromDocument = (document, minTokensPerSnippet = exports.MIN_TOKENS_PER_SNIPPET, maxTokensPerSnippet = exports.MAX_TOKENS_PER_SNIPPET) => __awaiter(void 0, void 0, void 0, function* () {
    var _e, _f;
    const { srt } = document;
    const createParams = [];
    const memory = [];
    let index = 0;
    for (const line of srt) {
        try {
            const isEndOfSentence = (() => {
                if (!line.text)
                    return false;
                return line.text.endsWith('.')
                    || line.text.endsWith('?')
                    || line.text.endsWith('!');
            })();
            memory.push(line);
            const params = yield createSnippetParamsFromLines(memory, document, index, (_f = (_e = memory === null || memory === void 0 ? void 0 : memory[0]) === null || _e === void 0 ? void 0 : _e.pageNumber) !== null && _f !== void 0 ? _f : undefined);
            const isOverMax = tokensInSnippet(params) >= maxTokensPerSnippet;
            if (isEndOfSentence || isOverMax || line === srt[srt.length - 1]) {
                if (tokensInSnippet(params) >= minTokensPerSnippet) {
                    createParams.push(params);
                    memory.length = 0;
                    index++;
                }
            }
        }
        catch (e) {
            console.log('Snippet Parsing Error Caught');
            console.log(e);
            console.log(document);
            throw e;
        }
    }
    return createParams;
});
const SnippetUtil = Object.assign({ hash,
    tokensInSnippet,
    createSnippetParamsFromLines,
    createSnippetParamsFromDocument }, SnippetEdgeUtil_1.default);
exports.default = SnippetUtil;
//# sourceMappingURL=SnippetUtil.js.map