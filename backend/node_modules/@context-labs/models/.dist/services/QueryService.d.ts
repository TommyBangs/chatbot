import z from 'zod';
import { Snippet } from './SnippetService';
export declare const queryEdit: z.ZodObject<{
    _id: z.ZodOptional<z.ZodString>;
    value: z.ZodString;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    value: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    _id?: string | undefined;
}, {
    value: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    _id?: string | undefined;
}>;
export declare const queryOrigin: z.ZodObject<{
    channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
    originId: z.ZodOptional<z.ZodString>;
    originName: z.ZodOptional<z.ZodString>;
    originChannelId: z.ZodOptional<z.ZodString>;
    originChannelName: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
    originId?: string | undefined;
    originName?: string | undefined;
    originChannelId?: string | undefined;
    originChannelName?: string | undefined;
}, {
    channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
    originId?: string | undefined;
    originName?: string | undefined;
    originChannelId?: string | undefined;
    originChannelName?: string | undefined;
}>;
export declare const query: z.ZodObject<{
    _id: z.ZodString;
    distinctId: z.ZodString;
    organizationId: z.ZodString;
    botId: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    snippetIds: z.ZodArray<z.ZodString, "many">;
    input: z.ZodString;
    output: z.ZodString;
    helpful: z.ZodNullable<z.ZodBoolean>;
    mark: z.ZodNullable<z.ZodBoolean>;
    edits: z.ZodArray<z.ZodObject<{
        _id: z.ZodOptional<z.ZodString>;
        value: z.ZodString;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        value: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        _id?: string | undefined;
    }, {
        value: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        _id?: string | undefined;
    }>, "many">;
    model: z.ZodNullable<z.ZodNativeEnum<{
        GPT35Turbo: string;
        GPT35Turbo0613: string;
        GPT35Turbo16K: string;
        GPT4: string;
        GPT40613: string;
        GPT41106: string;
        TextEmbeddingAda002: string;
    }>>;
    embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
    type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
    origin: z.ZodNullable<z.ZodObject<{
        channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
        originId: z.ZodOptional<z.ZodString>;
        originName: z.ZodOptional<z.ZodString>;
        originChannelId: z.ZodOptional<z.ZodString>;
        originChannelName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }>>;
    cachedQueryId: z.ZodNullable<z.ZodString>;
    geolocation: z.ZodNullable<z.ZodObject<{
        city: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
        region: z.ZodOptional<z.ZodString>;
        countryRegion: z.ZodOptional<z.ZodString>;
        latitude: z.ZodOptional<z.ZodString>;
        longitude: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    }, {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    }>>;
    lang: z.ZodOptional<z.ZodString>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: import("../enums/SearchTypes").EnumValues;
    _id: string;
    organizationId: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    botId: string;
    sourceIds: string[];
    model: string | null;
    distinctId: string;
    snippetIds: string[];
    input: string;
    output: string;
    helpful: boolean | null;
    mark: boolean | null;
    edits: {
        value: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        _id?: string | undefined;
    }[];
    embedding: number[] | null;
    origin: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | null;
    cachedQueryId: string | null;
    geolocation: {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    } | null;
    lang?: string | undefined;
}, {
    type: import("../enums/SearchTypes").EnumValues;
    _id: string;
    organizationId: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    botId: string;
    sourceIds: string[];
    model: string | null;
    distinctId: string;
    snippetIds: string[];
    input: string;
    output: string;
    helpful: boolean | null;
    mark: boolean | null;
    edits: {
        value: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        _id?: string | undefined;
    }[];
    embedding: number[] | null;
    origin: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | null;
    cachedQueryId: string | null;
    geolocation: {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    } | null;
    lang?: string | undefined;
}>;
export type Query = z.infer<typeof query>;
export type QueryEdit = z.infer<typeof queryEdit>;
export type QueryOrigin = z.infer<typeof queryOrigin>;
export type QueryResolved = Query & {
    snippets: Snippet[];
};
export interface QueryService {
    create(request: CreateQueryRequest): Promise<CreateQueryResponse>;
    setFeedback(request: SetQueryFeedbackRequest): Promise<SetQueryFeedbackResponse>;
    addEdit(request: AddQueryEditRequest): Promise<AddQueryEditResponse>;
    get(request: GetQueryRequest): Promise<GetQueryResponse>;
    list(request: ListQueriesRequest): Promise<ListQueriesResponse>;
    count(request: CountQueriesRequest): Promise<CountQueriesResponse>;
}
/** ******************************************************************************
*  Create Query
******************************************************************************* */
export declare const createQueryParams: z.ZodObject<{
    distinctId: z.ZodString;
    organizationId: z.ZodString;
    botId: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    snippetIds: z.ZodArray<z.ZodString, "many">;
    input: z.ZodString;
    output: z.ZodString;
    model: z.ZodNullable<z.ZodNativeEnum<{
        GPT35Turbo: string;
        GPT35Turbo0613: string;
        GPT35Turbo16K: string;
        GPT4: string;
        GPT40613: string;
        GPT41106: string;
        TextEmbeddingAda002: string;
    }>>;
    embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
    type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
    origin: z.ZodNullable<z.ZodObject<{
        channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
        originId: z.ZodOptional<z.ZodString>;
        originName: z.ZodOptional<z.ZodString>;
        originChannelId: z.ZodOptional<z.ZodString>;
        originChannelName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }>>;
    cachedQueryId: z.ZodNullable<z.ZodString>;
    geolocation: z.ZodNullable<z.ZodObject<{
        city: z.ZodOptional<z.ZodString>;
        country: z.ZodOptional<z.ZodString>;
        region: z.ZodOptional<z.ZodString>;
        countryRegion: z.ZodOptional<z.ZodString>;
        latitude: z.ZodOptional<z.ZodString>;
        longitude: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    }, {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    }>>;
    lang: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: import("../enums/SearchTypes").EnumValues;
    organizationId: string;
    botId: string;
    sourceIds: string[];
    model: string | null;
    distinctId: string;
    snippetIds: string[];
    input: string;
    output: string;
    embedding: number[] | null;
    origin: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | null;
    cachedQueryId: string | null;
    geolocation: {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    } | null;
    lang?: string | undefined;
}, {
    type: import("../enums/SearchTypes").EnumValues;
    organizationId: string;
    botId: string;
    sourceIds: string[];
    model: string | null;
    distinctId: string;
    snippetIds: string[];
    input: string;
    output: string;
    embedding: number[] | null;
    origin: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | null;
    cachedQueryId: string | null;
    geolocation: {
        city?: string | undefined;
        country?: string | undefined;
        region?: string | undefined;
        countryRegion?: string | undefined;
        latitude?: string | undefined;
        longitude?: string | undefined;
    } | null;
    lang?: string | undefined;
}>;
export declare const createQueryRequest: z.ZodObject<{
    params: z.ZodObject<{
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        organizationId: string;
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        organizationId: string;
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: import("../enums/SearchTypes").EnumValues;
        organizationId: string;
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    };
}, {
    params: {
        type: import("../enums/SearchTypes").EnumValues;
        organizationId: string;
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    };
}>;
export declare const createQueryResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    query: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
        mark: z.ZodNullable<z.ZodBoolean>;
        edits: z.ZodArray<z.ZodObject<{
            _id: z.ZodOptional<z.ZodString>;
            value: z.ZodString;
            meta: z.ZodObject<{
                createdAt: z.ZodOptional<z.ZodNumber>;
                createdBy: z.ZodOptional<z.ZodString>;
                lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
                lastUpdatedBy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }>, "many">;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
}>;
export type CreateQueryParams = z.infer<typeof createQueryParams>;
export type CreateQueryRequest = z.infer<typeof createQueryRequest>;
export type CreateQueryResponse = z.infer<typeof createQueryResponse>;
/** ******************************************************************************
*  Set Query Feedback
******************************************************************************* */
export declare const setQueryFeedbackParams: z.ZodObject<{
    queryId: z.ZodString;
    helpful: z.ZodNullable<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    helpful: boolean | null;
    queryId: string;
}, {
    helpful: boolean | null;
    queryId: string;
}>;
export declare const setQueryFeedbackRequest: z.ZodObject<{
    params: z.ZodObject<{
        queryId: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        helpful: boolean | null;
        queryId: string;
    }, {
        helpful: boolean | null;
        queryId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        helpful: boolean | null;
        queryId: string;
    };
}, {
    params: {
        helpful: boolean | null;
        queryId: string;
    };
}>;
export declare const setQueryFeedbackResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    query: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
        mark: z.ZodNullable<z.ZodBoolean>;
        edits: z.ZodArray<z.ZodObject<{
            _id: z.ZodOptional<z.ZodString>;
            value: z.ZodString;
            meta: z.ZodObject<{
                createdAt: z.ZodOptional<z.ZodNumber>;
                createdBy: z.ZodOptional<z.ZodString>;
                lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
                lastUpdatedBy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }>, "many">;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
}>;
export type SetQueryFeedbackParams = z.infer<typeof setQueryFeedbackParams>;
export type SetQueryFeedbackRequest = z.infer<typeof setQueryFeedbackRequest>;
export type SetQueryFeedbackResponse = z.infer<typeof setQueryFeedbackResponse>;
/** ******************************************************************************
*  Set Query Correction
******************************************************************************* */
export declare const addQueryEditParams: z.ZodObject<{
    _id: z.ZodString;
    mark: z.ZodNullable<z.ZodBoolean>;
    edit: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    _id: string;
    mark: boolean | null;
    edit: string | null;
}, {
    _id: string;
    mark: boolean | null;
    edit: string | null;
}>;
export declare const addQueryEditRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodString;
        mark: z.ZodNullable<z.ZodBoolean>;
        edit: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        mark: boolean | null;
        edit: string | null;
    }, {
        _id: string;
        mark: boolean | null;
        edit: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
        mark: boolean | null;
        edit: string | null;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id: string;
        mark: boolean | null;
        edit: string | null;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const addQueryEditResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    query: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
        mark: z.ZodNullable<z.ZodBoolean>;
        edits: z.ZodArray<z.ZodObject<{
            _id: z.ZodOptional<z.ZodString>;
            value: z.ZodString;
            meta: z.ZodObject<{
                createdAt: z.ZodOptional<z.ZodNumber>;
                createdBy: z.ZodOptional<z.ZodString>;
                lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
                lastUpdatedBy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }>, "many">;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
}>;
export type AddQueryEditParams = z.infer<typeof addQueryEditParams>;
export type AddQueryEditRequest = z.infer<typeof addQueryEditRequest>;
export type AddQueryEditResponse = z.infer<typeof addQueryEditResponse>;
/** ******************************************************************************
*  Get Query
******************************************************************************* */
export declare const getQueryParams: z.ZodObject<{
    queryId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    queryId: string;
}, {
    queryId: string;
}>;
export declare const getQueryRequest: z.ZodObject<{
    params: z.ZodObject<{
        queryId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        queryId: string;
    }, {
        queryId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        queryId: string;
    };
}, {
    params: {
        queryId: string;
    };
}>;
export declare const getQueryResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    query: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
        mark: z.ZodNullable<z.ZodBoolean>;
        edits: z.ZodArray<z.ZodObject<{
            _id: z.ZodOptional<z.ZodString>;
            value: z.ZodString;
            meta: z.ZodObject<{
                createdAt: z.ZodOptional<z.ZodNumber>;
                createdBy: z.ZodOptional<z.ZodString>;
                lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
                lastUpdatedBy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }>, "many">;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | null | undefined;
}>;
export type GetQueryParams = z.infer<typeof getQueryParams>;
export type GetQueryRequest = z.infer<typeof getQueryRequest>;
export type GetQueryResponse = z.infer<typeof getQueryResponse>;
/** ******************************************************************************
*  List Queries
******************************************************************************* */
export declare const listQueriesParams: z.ZodObject<{
    botId: z.ZodOptional<z.ZodString>;
    sourceIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    search: z.ZodOptional<z.ZodString>;
    offset: z.ZodOptional<z.ZodNumber>;
    pageSize: z.ZodOptional<z.ZodNumber>;
    isSuper: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    botId?: string | undefined;
    sourceIds?: string[] | undefined;
    search?: string | undefined;
    offset?: number | undefined;
    pageSize?: number | undefined;
    isSuper?: boolean | undefined;
}, {
    botId?: string | undefined;
    sourceIds?: string[] | undefined;
    search?: string | undefined;
    offset?: number | undefined;
    pageSize?: number | undefined;
    isSuper?: boolean | undefined;
}>;
export declare const listQueriesRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        botId: z.ZodOptional<z.ZodString>;
        sourceIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        search: z.ZodOptional<z.ZodString>;
        offset: z.ZodOptional<z.ZodNumber>;
        pageSize: z.ZodOptional<z.ZodNumber>;
        isSuper: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        isSuper?: boolean | undefined;
    }, {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        isSuper?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        isSuper?: boolean | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        offset?: number | undefined;
        pageSize?: number | undefined;
        isSuper?: boolean | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const listQueriesResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    queries: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
        mark: z.ZodNullable<z.ZodBoolean>;
        edits: z.ZodArray<z.ZodObject<{
            _id: z.ZodOptional<z.ZodString>;
            value: z.ZodString;
            meta: z.ZodObject<{
                createdAt: z.ZodOptional<z.ZodNumber>;
                createdBy: z.ZodOptional<z.ZodString>;
                lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
                lastUpdatedBy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }>, "many">;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>, "many">>;
    total: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    queries?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }[] | undefined;
    total?: number | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    queries?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }[] | undefined;
    total?: number | undefined;
}>;
export type ListQueriesParams = z.infer<typeof listQueriesParams>;
export type ListQueriesRequest = z.infer<typeof listQueriesRequest>;
export type ListQueriesResponse = z.infer<typeof listQueriesResponse>;
/** ******************************************************************************
*  Count Queries
******************************************************************************* */
export declare const countQueriesParams: z.ZodObject<{
    botId: z.ZodOptional<z.ZodString>;
    sourceIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    search: z.ZodOptional<z.ZodString>;
    isSuper: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    botId?: string | undefined;
    sourceIds?: string[] | undefined;
    search?: string | undefined;
    isSuper?: boolean | undefined;
}, {
    botId?: string | undefined;
    sourceIds?: string[] | undefined;
    search?: string | undefined;
    isSuper?: boolean | undefined;
}>;
export declare const countQueriesRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        botId: z.ZodOptional<z.ZodString>;
        sourceIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        search: z.ZodOptional<z.ZodString>;
        isSuper: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        isSuper?: boolean | undefined;
    }, {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        isSuper?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        isSuper?: boolean | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        botId?: string | undefined;
        sourceIds?: string[] | undefined;
        search?: string | undefined;
        isSuper?: boolean | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const countQueriesResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    count: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    count?: number | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    count?: number | undefined;
}>;
export type CountQueriesParams = z.infer<typeof countQueriesParams>;
export type CountQueriesRequest = z.infer<typeof countQueriesRequest>;
export type CountQueriesResponse = z.infer<typeof countQueriesResponse>;
