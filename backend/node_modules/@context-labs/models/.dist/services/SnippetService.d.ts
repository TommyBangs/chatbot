import z from 'zod';
export declare const zSnippetTypes: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
export declare const snippet: z.ZodObject<{
    _id: z.ZodString;
    organizationId: z.ZodString;
    sourceId: z.ZodString;
    syncId: z.ZodString;
    documentId: z.ZodString;
    title: z.ZodString;
    text: z.ZodString;
    type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
    url: z.ZodString;
    domain: z.ZodOptional<z.ZodString>;
    lang: z.ZodOptional<z.ZodString>;
    hash: z.ZodString;
    index: z.ZodNumber;
    startTime: z.ZodNullable<z.ZodString>;
    startSeconds: z.ZodNumber;
    endTime: z.ZodOptional<z.ZodString>;
    endSeconds: z.ZodOptional<z.ZodNumber>;
    releasedAt: z.ZodOptional<z.ZodNumber>;
    views: z.ZodOptional<z.ZodNumber>;
    pageNumber: z.ZodOptional<z.ZodNumber>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "YouTube" | "RSS" | "WebPage" | "File";
    text: string;
    startTime: string | null;
    startSeconds: number;
    url: string;
    organizationId: string;
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    sourceId: string;
    syncId: string;
    title: string;
    documentId: string;
    hash: string;
    index: number;
    domain?: string | undefined;
    lang?: string | undefined;
    endTime?: string | undefined;
    endSeconds?: number | undefined;
    releasedAt?: number | undefined;
    views?: number | undefined;
    pageNumber?: number | undefined;
}, {
    type: "YouTube" | "RSS" | "WebPage" | "File";
    text: string;
    startTime: string | null;
    startSeconds: number;
    url: string;
    organizationId: string;
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    sourceId: string;
    syncId: string;
    title: string;
    documentId: string;
    hash: string;
    index: number;
    domain?: string | undefined;
    lang?: string | undefined;
    endTime?: string | undefined;
    endSeconds?: number | undefined;
    releasedAt?: number | undefined;
    views?: number | undefined;
    pageNumber?: number | undefined;
}>;
export type Snippet = z.infer<typeof snippet>;
export declare enum SnippetSortBy {
    Relevance = "Relevance",
    MostPopular = "Most Popular",
    LeastPopular = "Least Popular",
    MostRecent = "Most Recent",
    LeastRecent = "Least Recent"
}
export interface SnippetService {
    create(request: CreateSnippetRequest): Promise<CreateSnippetResponse>;
    get(request: GetSnippetRequest): Promise<GetSnippetResponse>;
    list(request: ListSnippetsRequest): Promise<ListSnippetsResponse>;
    count(request: CountSnippetsRequest): Promise<CountSnippetsResponse>;
}
/** ******************************************************************************
*  Create Snippet
******************************************************************************* */
export declare const createSnippetParams: z.ZodObject<{
    organizationId: z.ZodString;
    sourceId: z.ZodString;
    syncId: z.ZodString;
    documentId: z.ZodString;
    title: z.ZodString;
    text: z.ZodString;
    type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
    url: z.ZodString;
    domain: z.ZodOptional<z.ZodString>;
    lang: z.ZodOptional<z.ZodString>;
    hash: z.ZodString;
    index: z.ZodNumber;
    startTime: z.ZodOptional<z.ZodString>;
    startSeconds: z.ZodOptional<z.ZodNumber>;
    endTime: z.ZodOptional<z.ZodString>;
    endSeconds: z.ZodOptional<z.ZodNumber>;
    releasedAt: z.ZodOptional<z.ZodNumber>;
    views: z.ZodOptional<z.ZodNumber>;
    pageNumber: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "YouTube" | "RSS" | "WebPage" | "File";
    text: string;
    url: string;
    organizationId: string;
    sourceId: string;
    syncId: string;
    title: string;
    documentId: string;
    hash: string;
    index: number;
    domain?: string | undefined;
    lang?: string | undefined;
    startTime?: string | undefined;
    startSeconds?: number | undefined;
    endTime?: string | undefined;
    endSeconds?: number | undefined;
    releasedAt?: number | undefined;
    views?: number | undefined;
    pageNumber?: number | undefined;
}, {
    type: "YouTube" | "RSS" | "WebPage" | "File";
    text: string;
    url: string;
    organizationId: string;
    sourceId: string;
    syncId: string;
    title: string;
    documentId: string;
    hash: string;
    index: number;
    domain?: string | undefined;
    lang?: string | undefined;
    startTime?: string | undefined;
    startSeconds?: number | undefined;
    endTime?: string | undefined;
    endSeconds?: number | undefined;
    releasedAt?: number | undefined;
    views?: number | undefined;
    pageNumber?: number | undefined;
}>;
export declare const createSnippetRequest: z.ZodObject<{
    params: z.ZodArray<z.ZodObject<{
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        syncId: z.ZodString;
        documentId: z.ZodString;
        title: z.ZodString;
        text: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
        url: z.ZodString;
        domain: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        hash: z.ZodString;
        index: z.ZodNumber;
        startTime: z.ZodOptional<z.ZodString>;
        startSeconds: z.ZodOptional<z.ZodNumber>;
        endTime: z.ZodOptional<z.ZodString>;
        endSeconds: z.ZodOptional<z.ZodNumber>;
        releasedAt: z.ZodOptional<z.ZodNumber>;
        views: z.ZodOptional<z.ZodNumber>;
        pageNumber: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        url: string;
        organizationId: string;
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        startTime?: string | undefined;
        startSeconds?: number | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        url: string;
        organizationId: string;
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        startTime?: string | undefined;
        startSeconds?: number | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        url: string;
        organizationId: string;
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        startTime?: string | undefined;
        startSeconds?: number | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[];
}, {
    params: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        url: string;
        organizationId: string;
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        startTime?: string | undefined;
        startSeconds?: number | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[];
}>;
export declare const createSnippetResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    snippets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        syncId: z.ZodString;
        documentId: z.ZodString;
        title: z.ZodString;
        text: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
        url: z.ZodString;
        domain: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        hash: z.ZodString;
        index: z.ZodNumber;
        startTime: z.ZodNullable<z.ZodString>;
        startSeconds: z.ZodNumber;
        endTime: z.ZodOptional<z.ZodString>;
        endSeconds: z.ZodOptional<z.ZodNumber>;
        releasedAt: z.ZodOptional<z.ZodNumber>;
        views: z.ZodOptional<z.ZodNumber>;
        pageNumber: z.ZodOptional<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    snippets?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    snippets?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[] | undefined;
}>;
export type CreateSnippetParams = z.infer<typeof createSnippetParams>;
export type CreateSnippetRequest = z.infer<typeof createSnippetRequest>;
export type CreateSnippetResponse = z.infer<typeof createSnippetResponse>;
/** ******************************************************************************
*  Get Snippet
******************************************************************************* */
export declare const getSnippetParams: z.ZodObject<{
    snippetId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    snippetId: string;
}, {
    snippetId: string;
}>;
export declare const getSnippetRequest: z.ZodObject<{
    params: z.ZodObject<{
        snippetId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        snippetId: string;
    }, {
        snippetId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        snippetId: string;
    };
}, {
    params: {
        snippetId: string;
    };
}>;
export declare const getSnippetResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    snippet: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        syncId: z.ZodString;
        documentId: z.ZodString;
        title: z.ZodString;
        text: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
        url: z.ZodString;
        domain: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        hash: z.ZodString;
        index: z.ZodNumber;
        startTime: z.ZodNullable<z.ZodString>;
        startSeconds: z.ZodNumber;
        endTime: z.ZodOptional<z.ZodString>;
        endSeconds: z.ZodOptional<z.ZodNumber>;
        releasedAt: z.ZodOptional<z.ZodNumber>;
        views: z.ZodOptional<z.ZodNumber>;
        pageNumber: z.ZodOptional<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    snippet?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    snippet?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    } | null | undefined;
}>;
export type GetSnippetParams = z.infer<typeof getSnippetParams>;
export type GetSnippetRequest = z.infer<typeof getSnippetRequest>;
export type GetSnippetResponse = z.infer<typeof getSnippetResponse>;
/** ******************************************************************************
*  List Snippets
******************************************************************************* */
export declare const listSnippetsParams: z.ZodObject<{
    _ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    documentId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    _ids?: string[] | undefined;
    documentId?: string | undefined;
}, {
    _ids?: string[] | undefined;
    documentId?: string | undefined;
}>;
export declare const listSnippetsRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        documentId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        _ids?: string[] | undefined;
        documentId?: string | undefined;
    }, {
        _ids?: string[] | undefined;
        documentId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _ids?: string[] | undefined;
        documentId?: string | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _ids?: string[] | undefined;
        documentId?: string | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const listSnippetsResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    snippets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        syncId: z.ZodString;
        documentId: z.ZodString;
        title: z.ZodString;
        text: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
        url: z.ZodString;
        domain: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        hash: z.ZodString;
        index: z.ZodNumber;
        startTime: z.ZodNullable<z.ZodString>;
        startSeconds: z.ZodNumber;
        endTime: z.ZodOptional<z.ZodString>;
        endSeconds: z.ZodOptional<z.ZodNumber>;
        releasedAt: z.ZodOptional<z.ZodNumber>;
        views: z.ZodOptional<z.ZodNumber>;
        pageNumber: z.ZodOptional<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    snippets?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    snippets?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        text: string;
        startTime: string | null;
        startSeconds: number;
        url: string;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        syncId: string;
        title: string;
        documentId: string;
        hash: string;
        index: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[] | undefined;
}>;
export type ListSnippetsParams = z.infer<typeof listSnippetsParams>;
export type ListSnippetsRequest = z.infer<typeof listSnippetsRequest>;
export type ListSnippetsResponse = z.infer<typeof listSnippetsResponse>;
/** ******************************************************************************
*  Count Snippets
******************************************************************************* */
export declare const countSnippetsParams: z.ZodObject<{
    sourceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sourceId: string;
}, {
    sourceId: string;
}>;
export declare const countSnippetsRequest: z.ZodObject<{
    params: z.ZodObject<{
        sourceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sourceId: string;
    }, {
        sourceId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        sourceId: string;
    };
}, {
    params: {
        sourceId: string;
    };
}>;
export declare const countSnippetsResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    count: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    count?: number | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    count?: number | undefined;
}>;
export type CountSnippetsParams = z.infer<typeof countSnippetsParams>;
export type CountSnippetsRequest = z.infer<typeof countSnippetsRequest>;
export type CountSnippetsResponse = z.infer<typeof countSnippetsResponse>;
