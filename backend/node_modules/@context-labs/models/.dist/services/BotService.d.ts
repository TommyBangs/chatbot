import z from 'zod';
import { SourceResolved } from './SourceService';
import { Invoice } from './InvoiceService';
export declare const zEmbedTheme: z.ZodEnum<["dark", "light"]>;
export declare const zEmbedType: z.ZodEnum<["attribute", "launcher"]>;
export declare const zEmbedPosition: z.ZodEnum<["bottom-right", "bottom-left"]>;
export declare const embedConfiguration: z.ZodObject<{
    enabled: z.ZodOptional<z.ZodBoolean>;
    theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
    type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
    position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
    background: z.ZodOptional<z.ZodString>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    enabled?: boolean | undefined;
    theme?: "light" | "dark" | undefined;
    type?: "launcher" | "attribute" | undefined;
    position?: "bottom-right" | "bottom-left" | undefined;
    background?: string | undefined;
    color?: string | undefined;
}, {
    enabled?: boolean | undefined;
    theme?: "light" | "dark" | undefined;
    type?: "launcher" | "attribute" | undefined;
    position?: "bottom-right" | "bottom-left" | undefined;
    background?: string | undefined;
    color?: string | undefined;
}>;
export declare const trackingConfiguration: z.ZodObject<{
    utms: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    utms: string[];
}, {
    utms: string[];
}>;
export declare const promptConfiguration: z.ZodObject<{
    topic: z.ZodString;
    context: z.ZodString;
}, "strip", z.ZodTypeAny, {
    topic: string;
    context: string;
}, {
    topic: string;
    context: string;
}>;
export declare const bot: z.ZodObject<{
    _id: z.ZodString;
    organizationId: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    title: z.ZodString;
    description: z.ZodString;
    imageFileId: z.ZodString;
    brandColor: z.ZodString;
    website: z.ZodString;
    faqs: z.ZodArray<z.ZodString, "many">;
    model: z.ZodNativeEnum<{
        GPT35Turbo: string;
        GPT35Turbo0613: string;
        GPT35Turbo16K: string;
        GPT4: string;
        GPT40613: string;
        GPT41106: string;
        TextEmbeddingAda002: string;
    }>;
    archived: z.ZodBoolean;
    embed: z.ZodObject<{
        enabled: z.ZodOptional<z.ZodBoolean>;
        theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
        type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
        position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
        background: z.ZodOptional<z.ZodString>;
        color: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    }, {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    }>;
    tracking: z.ZodObject<{
        utms: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        utms: string[];
    }, {
        utms: string[];
    }>;
    prompt: z.ZodObject<{
        topic: z.ZodString;
        context: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        topic: string;
        context: string;
    }, {
        topic: string;
        context: string;
    }>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    _id: string;
    organizationId: string;
    title: string;
    description: string;
    imageFileId: string;
    archived: boolean;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    sourceIds: string[];
    brandColor: string;
    website: string;
    faqs: string[];
    model: string;
    embed: {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    };
    tracking: {
        utms: string[];
    };
    prompt: {
        topic: string;
        context: string;
    };
}, {
    _id: string;
    organizationId: string;
    title: string;
    description: string;
    imageFileId: string;
    archived: boolean;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    sourceIds: string[];
    brandColor: string;
    website: string;
    faqs: string[];
    model: string;
    embed: {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    };
    tracking: {
        utms: string[];
    };
    prompt: {
        topic: string;
        context: string;
    };
}>;
export declare const botFiles: z.ZodObject<{
    imageFile: z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        name: z.ZodString;
        mimetype: z.ZodString;
        encoding: z.ZodString;
        sizeBytes: z.ZodOptional<z.ZodNumber>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        url: z.ZodString;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    imageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
}, {
    imageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
}>;
export type Bot = z.infer<typeof bot>;
export type BotFiles = z.infer<typeof botFiles>;
export type EmbedConfiguration = z.infer<typeof embedConfiguration>;
export type EmbedTheme = z.infer<typeof zEmbedTheme>;
export type EmbedType = z.infer<typeof zEmbedType>;
export type EmbedPosition = z.infer<typeof zEmbedPosition>;
export type TrackingConfiguration = z.infer<typeof trackingConfiguration>;
export type PromptConfiguration = z.infer<typeof promptConfiguration>;
export type BotResolved = Bot & {
    sources: SourceResolved[];
    files: BotFiles;
    invoice: Invoice;
};
export interface BotService {
    create(request: CreateBotRequest): Promise<CreateBotResponse>;
    edit(request: EditBotRequest): Promise<EditBotResponse>;
    archive(request: ArchiveBotRequest): Promise<ArchiveBotResponse>;
    get(request: GetBotRequest): Promise<GetBotResponse>;
    list(request: ListBotsRequest): Promise<ListBotsResponse>;
    superList(request: SuperListBotsRequest): Promise<SuperListBotsResponse>;
}
/** ******************************************************************************
*  Create Bot
******************************************************************************* */
export declare const createBotParams: z.ZodObject<{
    title: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    description: z.ZodString;
    imageFileId: z.ZodString;
    brandColor: z.ZodString;
    website: z.ZodString;
    faqs: z.ZodArray<z.ZodString, "many">;
    tracking: z.ZodObject<{
        utms: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        utms: string[];
    }, {
        utms: string[];
    }>;
    prompt: z.ZodObject<{
        topic: z.ZodString;
        context: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        topic: string;
        context: string;
    }, {
        topic: string;
        context: string;
    }>;
    addSource: z.ZodObject<{
        botId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stripePriceId: z.ZodOptional<z.ZodString>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    }>;
    model: z.ZodNativeEnum<{
        GPT35Turbo: string;
        GPT35Turbo0613: string;
        GPT35Turbo16K: string;
        GPT4: string;
        GPT40613: string;
        GPT41106: string;
        TextEmbeddingAda002: string;
    }>;
}, "strip", z.ZodTypeAny, {
    title: string;
    description: string;
    imageFileId: string;
    sourceIds: string[];
    brandColor: string;
    website: string;
    faqs: string[];
    model: string;
    tracking: {
        utms: string[];
    };
    prompt: {
        topic: string;
        context: string;
    };
    addSource: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    };
}, {
    title: string;
    description: string;
    imageFileId: string;
    sourceIds: string[];
    brandColor: string;
    website: string;
    faqs: string[];
    model: string;
    tracking: {
        utms: string[];
    };
    prompt: {
        topic: string;
        context: string;
    };
    addSource: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    };
}>;
export declare const createBotRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        title: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        addSource: z.ZodObject<{
            botId: z.ZodOptional<z.ZodString>;
            title: z.ZodString;
            description: z.ZodString;
            imageFileId: z.ZodString;
            importUrl: z.ZodOptional<z.ZodString>;
            transcribe: z.ZodOptional<z.ZodBoolean>;
            regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            stripePriceId: z.ZodOptional<z.ZodString>;
            type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        }, "strip", z.ZodTypeAny, {
            type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
            title: string;
            description: string;
            imageFileId: string;
            botId?: string | undefined;
            importUrl?: string | undefined;
            transcribe?: boolean | undefined;
            regex?: string | null | undefined;
            stripePriceId?: string | undefined;
        }, {
            type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
            title: string;
            description: string;
            imageFileId: string;
            botId?: string | undefined;
            importUrl?: string | undefined;
            transcribe?: boolean | undefined;
            regex?: string | null | undefined;
            stripePriceId?: string | undefined;
        }>;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        description: string;
        imageFileId: string;
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
        addSource: {
            type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
            title: string;
            description: string;
            imageFileId: string;
            botId?: string | undefined;
            importUrl?: string | undefined;
            transcribe?: boolean | undefined;
            regex?: string | null | undefined;
            stripePriceId?: string | undefined;
        };
    }, {
        title: string;
        description: string;
        imageFileId: string;
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
        addSource: {
            type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
            title: string;
            description: string;
            imageFileId: string;
            botId?: string | undefined;
            importUrl?: string | undefined;
            transcribe?: boolean | undefined;
            regex?: string | null | undefined;
            stripePriceId?: string | undefined;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        title: string;
        description: string;
        imageFileId: string;
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
        addSource: {
            type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
            title: string;
            description: string;
            imageFileId: string;
            botId?: string | undefined;
            importUrl?: string | undefined;
            transcribe?: boolean | undefined;
            regex?: string | null | undefined;
            stripePriceId?: string | undefined;
        };
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        title: string;
        description: string;
        imageFileId: string;
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
        addSource: {
            type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
            title: string;
            description: string;
            imageFileId: string;
            botId?: string | undefined;
            importUrl?: string | undefined;
            transcribe?: boolean | undefined;
            regex?: string | null | undefined;
            stripePriceId?: string | undefined;
        };
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const createBotResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    bot: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>>;
    sources: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>, "many">>>;
    syncs: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        type: z.ZodEnum<["Initial", "Manual", "Automatic"]>;
        status: z.ZodEnum<["Pending", "Running", "Complete", "Failed"]>;
        message: z.ZodOptional<z.ZodString>;
        info: z.ZodObject<{
            total: z.ZodNumber;
            new: z.ZodNumber;
            existing: z.ZodNumber;
            removed: z.ZodNumber;
            pending: z.ZodNumber;
            running: z.ZodNumber;
            completed: z.ZodNumber;
            failed: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        }, {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    }, {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    }>, "many">>>;
    subscription: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        stripeCustomerId: z.ZodString;
        stripeSubscriptionId: z.ZodString;
        stripeProductId: z.ZodString;
        stripePriceId: z.ZodString;
        status: z.ZodEnum<["Pending", "Active", "Canceled"]>;
        upgrade: z.ZodNullable<z.ZodObject<{
            productId: z.ZodString;
            priceId: z.ZodString;
            botId: z.ZodNullable<z.ZodString>;
            sourceIds: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        }, {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        }>>;
        usageLimits: z.ZodObject<{
            credits: z.ZodNumber;
            documents: z.ZodNumber;
            syncs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            credits: number;
            documents: number;
            syncs: number;
        }, {
            credits: number;
            documents: number;
            syncs: number;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    }, {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | undefined;
    sources?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }[] | null | undefined;
    syncs?: {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    }[] | null | undefined;
    subscription?: {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | undefined;
    sources?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }[] | null | undefined;
    syncs?: {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    }[] | null | undefined;
    subscription?: {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    } | null | undefined;
}>;
export type CreateBotParams = z.infer<typeof createBotParams>;
export type CreateBotRequest = z.infer<typeof createBotRequest>;
export type CreateBotResponse = z.infer<typeof createBotResponse>;
/** ******************************************************************************
*  Edit Bot
******************************************************************************* */
export declare const editBotParams: z.ZodObject<{
    _id: z.ZodString;
    title: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    description: z.ZodString;
    imageFileId: z.ZodString;
    brandColor: z.ZodString;
    website: z.ZodString;
    faqs: z.ZodArray<z.ZodString, "many">;
    model: z.ZodNativeEnum<{
        GPT35Turbo: string;
        GPT35Turbo0613: string;
        GPT35Turbo16K: string;
        GPT4: string;
        GPT40613: string;
        GPT41106: string;
        TextEmbeddingAda002: string;
    }>;
    embed: z.ZodObject<{
        enabled: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        theme: z.ZodOptional<z.ZodOptional<z.ZodEnum<["dark", "light"]>>>;
        type: z.ZodOptional<z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>>;
        position: z.ZodOptional<z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>>;
        background: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        color: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    }, {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    }>;
    tracking: z.ZodObject<{
        utms: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        utms: string[];
    }, {
        utms: string[];
    }>;
    prompt: z.ZodObject<{
        topic: z.ZodString;
        context: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        topic: string;
        context: string;
    }, {
        topic: string;
        context: string;
    }>;
}, "strip", z.ZodTypeAny, {
    _id: string;
    title: string;
    description: string;
    imageFileId: string;
    sourceIds: string[];
    brandColor: string;
    website: string;
    faqs: string[];
    model: string;
    embed: {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    };
    tracking: {
        utms: string[];
    };
    prompt: {
        topic: string;
        context: string;
    };
}, {
    _id: string;
    title: string;
    description: string;
    imageFileId: string;
    sourceIds: string[];
    brandColor: string;
    website: string;
    faqs: string[];
    model: string;
    embed: {
        enabled?: boolean | undefined;
        theme?: "light" | "dark" | undefined;
        type?: "launcher" | "attribute" | undefined;
        position?: "bottom-right" | "bottom-left" | undefined;
        background?: string | undefined;
        color?: string | undefined;
    };
    tracking: {
        utms: string[];
    };
    prompt: {
        topic: string;
        context: string;
    };
}>;
export declare const editBotRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodOptional<z.ZodString>;
        title: z.ZodOptional<z.ZodString>;
        sourceIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodString>;
        brandColor: z.ZodOptional<z.ZodString>;
        website: z.ZodOptional<z.ZodString>;
        faqs: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        model: z.ZodOptional<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embed: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
            theme: z.ZodOptional<z.ZodOptional<z.ZodEnum<["dark", "light"]>>>;
            type: z.ZodOptional<z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>>;
            position: z.ZodOptional<z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>>;
            background: z.ZodOptional<z.ZodOptional<z.ZodString>>;
            color: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>>;
        tracking: z.ZodOptional<z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>>;
        prompt: z.ZodOptional<z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        _id?: string | undefined;
        title?: string | undefined;
        sourceIds?: string[] | undefined;
        description?: string | undefined;
        imageFileId?: string | undefined;
        brandColor?: string | undefined;
        website?: string | undefined;
        faqs?: string[] | undefined;
        model?: string | undefined;
        embed?: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        } | undefined;
        tracking?: {
            utms: string[];
        } | undefined;
        prompt?: {
            topic: string;
            context: string;
        } | undefined;
    }, {
        _id?: string | undefined;
        title?: string | undefined;
        sourceIds?: string[] | undefined;
        description?: string | undefined;
        imageFileId?: string | undefined;
        brandColor?: string | undefined;
        website?: string | undefined;
        faqs?: string[] | undefined;
        model?: string | undefined;
        embed?: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        } | undefined;
        tracking?: {
            utms: string[];
        } | undefined;
        prompt?: {
            topic: string;
            context: string;
        } | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id?: string | undefined;
        title?: string | undefined;
        sourceIds?: string[] | undefined;
        description?: string | undefined;
        imageFileId?: string | undefined;
        brandColor?: string | undefined;
        website?: string | undefined;
        faqs?: string[] | undefined;
        model?: string | undefined;
        embed?: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        } | undefined;
        tracking?: {
            utms: string[];
        } | undefined;
        prompt?: {
            topic: string;
            context: string;
        } | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id?: string | undefined;
        title?: string | undefined;
        sourceIds?: string[] | undefined;
        description?: string | undefined;
        imageFileId?: string | undefined;
        brandColor?: string | undefined;
        website?: string | undefined;
        faqs?: string[] | undefined;
        model?: string | undefined;
        embed?: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        } | undefined;
        tracking?: {
            utms: string[];
        } | undefined;
        prompt?: {
            topic: string;
            context: string;
        } | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const editBotResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    bot: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | undefined;
}>;
export type EditBotParams = z.infer<typeof editBotParams>;
export type EditBotRequest = z.infer<typeof editBotRequest>;
export type EditBotResponse = z.infer<typeof editBotResponse>;
/** ******************************************************************************
*  Archive Bot
******************************************************************************* */
export declare const archiveBotParams: z.ZodObject<{
    _id: z.ZodString;
    archived: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    _id: string;
    archived: boolean;
}, {
    _id: string;
    archived: boolean;
}>;
export declare const archiveBotRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodString;
        archived: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        archived: boolean;
    }, {
        _id: string;
        archived: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
        archived: boolean;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id: string;
        archived: boolean;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const archiveBotResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    bot: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | undefined;
}>;
export type ArchiveBotParams = z.infer<typeof archiveBotParams>;
export type ArchiveBotRequest = z.infer<typeof archiveBotRequest>;
export type ArchiveBotResponse = z.infer<typeof archiveBotResponse>;
/** ******************************************************************************
*  Get Bot
******************************************************************************* */
export declare const getBotParams: z.ZodObject<{
    botId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    botId: string;
}, {
    botId: string;
}>;
export declare const getBotRequest: z.ZodObject<{
    params: z.ZodObject<{
        botId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        botId: string;
    }, {
        botId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        botId: string;
    };
}, {
    params: {
        botId: string;
    };
}>;
export declare const getBotResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    bot: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bot?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    } | null | undefined;
}>;
export type GetBotParams = z.infer<typeof getBotParams>;
export type GetBotRequest = z.infer<typeof getBotRequest>;
export type GetBotResponse = z.infer<typeof getBotResponse>;
/** ******************************************************************************
*  List Bots
******************************************************************************* */
export declare const listBotsParams: z.ZodObject<{
    archived: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    archived?: boolean | undefined;
}, {
    archived?: boolean | undefined;
}>;
export declare const listBotsRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        archived: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        archived?: boolean | undefined;
    }, {
        archived?: boolean | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        archived?: boolean | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        archived?: boolean | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const listBotsResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    bots: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bots?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bots?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }[] | undefined;
}>;
export type ListBotsParams = z.infer<typeof listBotsParams>;
export type ListBotsRequest = z.infer<typeof listBotsRequest>;
export type ListBotsResponse = z.infer<typeof listBotsResponse>;
/** ******************************************************************************
*  Super List Bots
******************************************************************************* */
export declare const superListBotsParams: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const superListBotsRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}, "strip", z.ZodTypeAny, {
    params: {};
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {};
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const superListBotsResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    bots: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bots?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    bots?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }[] | undefined;
}>;
export type SuperListBotsParams = z.infer<typeof superListBotsParams>;
export type SuperListBotsRequest = z.infer<typeof superListBotsRequest>;
export type SuperListBotsResponse = z.infer<typeof superListBotsResponse>;
