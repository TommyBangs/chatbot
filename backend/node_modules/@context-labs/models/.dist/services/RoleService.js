"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.superAssignOwnerRoleResponse = exports.superAssignOwnerRoleRequest = exports.superAssignOwnerRoleParams = exports.listRolesResponse = exports.listRolesRequest = exports.listRolesParams = exports.getRoleResponse = exports.getRoleRequest = exports.getRoleParams = exports.assignRolesResponse = exports.assignRolesRequest = exports.assignRolesParams = exports.acceptRoleResponse = exports.acceptRoleRequest = exports.acceptRoleParams = exports.deleteRoleResponse = exports.deleteRoleRequest = exports.deleteRoleParams = exports.createRoleResponse = exports.createRoleRequest = exports.createRoleParams = exports.role = exports.zRoleTypes = void 0;
const zod_1 = __importDefault(require("zod"));
const common_1 = require("../interfaces/common");
const Metadata_1 = require("../interfaces/Metadata");
exports.zRoleTypes = zod_1.default.enum([
    'Owner',
    'Member',
]);
exports.role = zod_1.default.object({
    _id: zod_1.default.string(),
    organizationId: zod_1.default.string(),
    userId: zod_1.default.string().nullable(),
    userEmail: zod_1.default.string().nullable(),
    type: exports.zRoleTypes,
    acceptedAt: zod_1.default.number().nullable(),
    meta: Metadata_1.metadata,
});
/** ******************************************************************************
*  Create Role
******************************************************************************* */
exports.createRoleParams = zod_1.default.object({
    userId: zod_1.default.string().nullable().optional(),
    userEmail: zod_1.default.string().nullable().optional(),
    type: exports.zRoleTypes,
});
exports.createRoleRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.createRoleParams,
}));
exports.createRoleResponse = common_1.serviceResponse.merge(zod_1.default.object({
    role: exports.role.optional(),
    user: zod_1.default.any().optional(),
}));
/** ******************************************************************************
*  Delete Role
******************************************************************************* */
exports.deleteRoleParams = zod_1.default.object({
    _id: zod_1.default.string(),
});
exports.deleteRoleRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.deleteRoleParams,
}));
exports.deleteRoleResponse = common_1.serviceResponse.merge(zod_1.default.object({
    _id: zod_1.default.string().optional(),
    success: zod_1.default.boolean().optional(),
}));
/** ******************************************************************************
*  Accept Role
******************************************************************************* */
exports.acceptRoleParams = zod_1.default.object({
    _id: zod_1.default.string(),
    accept: zod_1.default.boolean(),
});
exports.acceptRoleRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.acceptRoleParams,
}));
exports.acceptRoleResponse = common_1.serviceResponse.merge(zod_1.default.object({
    role: exports.role.nullable().optional(),
}));
/** ******************************************************************************
*  Assign Roles
******************************************************************************* */
exports.assignRolesParams = zod_1.default.object({
    userEmail: zod_1.default.string(),
    userId: zod_1.default.string(),
});
exports.assignRolesRequest = common_1.serviceRequest.merge(zod_1.default.object({
    params: exports.assignRolesParams,
}));
exports.assignRolesResponse = common_1.serviceResponse.merge(zod_1.default.object({
    roles: zod_1.default.array(exports.role).optional(),
}));
/** ******************************************************************************
*  Get Role
******************************************************************************* */
exports.getRoleParams = zod_1.default.object({
    roleId: zod_1.default.string(),
});
exports.getRoleRequest = common_1.serviceRequest.merge(zod_1.default.object({
    params: exports.getRoleParams,
}));
exports.getRoleResponse = common_1.serviceResponse.merge(zod_1.default.object({
    role: exports.role.nullable().optional(),
}));
/** ******************************************************************************
*  List Roles
******************************************************************************* */
exports.listRolesParams = zod_1.default.object({});
exports.listRolesRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.listRolesParams,
}));
exports.listRolesResponse = common_1.serviceResponse.merge(zod_1.default.object({
    user: zod_1.default.array(exports.role).optional(),
    organization: zod_1.default.array(exports.role).optional(),
}));
/** ******************************************************************************
*  Super Assign Owner Role
******************************************************************************* */
exports.superAssignOwnerRoleParams = zod_1.default.object({
    userId: zod_1.default.string(),
});
exports.superAssignOwnerRoleRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.superAssignOwnerRoleParams,
}));
exports.superAssignOwnerRoleResponse = common_1.serviceResponse.merge(zod_1.default.object({
    role: exports.role.optional(),
}));
//# sourceMappingURL=RoleService.js.map