import z from 'zod';
import { SlackEvent } from '../interfaces/slack.event';
export declare const slackTeam: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
}, {
    id: string;
    name: string;
}>;
export declare const slackAuthedUser: z.ZodObject<{
    id: z.ZodString;
    scope: z.ZodString;
    accessToken: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    scope: string;
    accessToken: string;
}, {
    id: string;
    scope: string;
    accessToken: string;
}>;
export declare const slack: z.ZodObject<{
    _id: z.ZodString;
    access_token: z.ZodString;
    scope: z.ZodString;
    team: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
    authedUser: z.ZodObject<{
        id: z.ZodString;
        scope: z.ZodString;
        accessToken: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        scope: string;
        accessToken: string;
    }, {
        id: string;
        scope: string;
        accessToken: string;
    }>;
    appId: z.ZodOptional<z.ZodString>;
    botId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    team: {
        id: string;
        name: string;
    };
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    scope: string;
    access_token: string;
    authedUser: {
        id: string;
        scope: string;
        accessToken: string;
    };
    appId?: string | undefined;
    botId?: string | undefined;
}, {
    team: {
        id: string;
        name: string;
    };
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    scope: string;
    access_token: string;
    authedUser: {
        id: string;
        scope: string;
        accessToken: string;
    };
    appId?: string | undefined;
    botId?: string | undefined;
}>;
export declare const slackChannel: z.ZodObject<{
    _id: z.ZodString;
    slackId: z.ZodString;
    name: z.ZodString;
    channelId: z.ZodString;
    webhookUrl: z.ZodOptional<z.ZodString>;
    configurationUrl: z.ZodOptional<z.ZodString>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
    botId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    _id: string;
    name: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    slackId: string;
    channelId: string;
    webhookUrl?: string | undefined;
    configurationUrl?: string | undefined;
    botId?: string | undefined;
}, {
    _id: string;
    name: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    slackId: string;
    channelId: string;
    webhookUrl?: string | undefined;
    configurationUrl?: string | undefined;
    botId?: string | undefined;
}>;
export type Slack = z.infer<typeof slack>;
export type SlackTeam = z.infer<typeof slackTeam>;
export type SlackAuthedUser = z.infer<typeof slackAuthedUser>;
export type SlackChannel = z.infer<typeof slackChannel>;
export interface SlackService {
    create(params: CreateSlackRequest): Promise<CreateSlackResponse>;
    getByAccessToken(params: GetSlackByAccessTokenRequest): Promise<GetSlackResponse>;
    registerSlackInstall(params: SlackOauthRedirectPayload): Promise<CreateSlackResponse>;
    getOauthPayload(code: string): Promise<SlackOauthRedirectPayload>;
    createChannel(params: CreateSlackChannelRequest): Promise<CreateSlackChannelResponse>;
    getSlackChannel(params: GetSlackChannelRequest): Promise<GetSlackChannelResponse>;
    getSlackChannelPayload(params: SlackOauthRedirectPayload): IncomingWebhookPayload;
    sendWelcomeMessage(params: SlackMessageRequest): Promise<any>;
    sendSlackMessage(request: SlackMessageRequest): Promise<void>;
    registerSlackBot(request: SlackRegisterRequest): Promise<SlackRegisterResponse>;
    processSlackEvent(event: SlackEvent): Promise<null>;
}
/** ******************************************************************************
*  Create Slack
******************************************************************************* */
export declare const createSlackParams: z.ZodObject<{
    access_token: z.ZodString;
    scope: z.ZodString;
    team: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
    authedUser: z.ZodObject<{
        id: z.ZodString;
        scope: z.ZodString;
        accessToken: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        scope: string;
        accessToken: string;
    }, {
        id: string;
        scope: string;
        accessToken: string;
    }>;
    botId: z.ZodOptional<z.ZodString>;
    appId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    team: {
        id: string;
        name: string;
    };
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    scope: string;
    access_token: string;
    authedUser: {
        id: string;
        scope: string;
        accessToken: string;
    };
    botId?: string | undefined;
    appId?: string | undefined;
}, {
    team: {
        id: string;
        name: string;
    };
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    scope: string;
    access_token: string;
    authedUser: {
        id: string;
        scope: string;
        accessToken: string;
    };
    botId?: string | undefined;
    appId?: string | undefined;
}>;
export declare const createSlackRequest: z.ZodObject<{
    params: z.ZodObject<{
        access_token: z.ZodString;
        scope: z.ZodString;
        team: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
        }, {
            id: string;
            name: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        authedUser: z.ZodObject<{
            id: z.ZodString;
            scope: z.ZodString;
            accessToken: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            scope: string;
            accessToken: string;
        }, {
            id: string;
            scope: string;
            accessToken: string;
        }>;
        botId: z.ZodOptional<z.ZodString>;
        appId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        team: {
            id: string;
            name: string;
        };
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        botId?: string | undefined;
        appId?: string | undefined;
    }, {
        team: {
            id: string;
            name: string;
        };
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        botId?: string | undefined;
        appId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        team: {
            id: string;
            name: string;
        };
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        botId?: string | undefined;
        appId?: string | undefined;
    };
}, {
    params: {
        team: {
            id: string;
            name: string;
        };
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        botId?: string | undefined;
        appId?: string | undefined;
    };
}>;
export declare const createSlackResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    slack: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        access_token: z.ZodString;
        scope: z.ZodString;
        team: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
        }, {
            id: string;
            name: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        authedUser: z.ZodObject<{
            id: z.ZodString;
            scope: z.ZodString;
            accessToken: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            scope: string;
            accessToken: string;
        }, {
            id: string;
            scope: string;
            accessToken: string;
        }>;
        appId: z.ZodOptional<z.ZodString>;
        botId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    }, {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    slack?: {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    slack?: {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    } | undefined;
}>;
export type CreateSlackParams = z.infer<typeof createSlackParams>;
export type CreateSlackRequest = z.infer<typeof createSlackRequest>;
export type CreateSlackResponse = z.infer<typeof createSlackResponse>;
/** ******************************************************************************
*  Get Slack
******************************************************************************* */
export declare const getSlackParamsByAccessToken: z.ZodObject<{
    access_token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    access_token: string;
}, {
    access_token: string;
}>;
export declare const getSlackByAccessTokenRequest: z.ZodObject<{
    params: z.ZodObject<{
        access_token: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        access_token: string;
    }, {
        access_token: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        access_token: string;
    };
}, {
    params: {
        access_token: string;
    };
}>;
export declare const getSlackResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    slack: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        access_token: z.ZodString;
        scope: z.ZodString;
        team: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
        }, {
            id: string;
            name: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        authedUser: z.ZodObject<{
            id: z.ZodString;
            scope: z.ZodString;
            accessToken: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            scope: string;
            accessToken: string;
        }, {
            id: string;
            scope: string;
            accessToken: string;
        }>;
        appId: z.ZodOptional<z.ZodString>;
        botId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    }, {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    slack?: {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    slack?: {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    } | null | undefined;
}>;
export type GetSlackParamsByAccessToken = z.infer<typeof getSlackParamsByAccessToken>;
export type GetSlackByAccessTokenRequest = z.infer<typeof getSlackByAccessTokenRequest>;
export type GetSlackResponse = z.infer<typeof getSlackResponse>;
/** ******************************************************************************
*  Slack OAuth Redirect
******************************************************************************* */
export declare const enterpriseSchema: z.ZodObject<{
    name: z.ZodString;
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
}, {
    id: string;
    name: string;
}>;
export declare const authedUserSchema: z.ZodObject<{
    id: z.ZodString;
    scope: z.ZodString;
    access_token: z.ZodString;
    token_type: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
    scope: string;
    access_token: string;
    token_type: string;
}, {
    id: string;
    scope: string;
    access_token: string;
    token_type: string;
}>;
export declare const incomingWebhook: z.ZodObject<{
    channel: z.ZodString;
    channel_id: z.ZodString;
    configuration_url: z.ZodString;
    url: z.ZodString;
}, "strip", z.ZodTypeAny, {
    url: string;
    channel: string;
    channel_id: string;
    configuration_url: string;
}, {
    url: string;
    channel: string;
    channel_id: string;
    configuration_url: string;
}>;
export declare const slackOauthRedirectPayload: z.ZodObject<{
    ok: z.ZodBoolean;
    access_token: z.ZodString;
    token_type: z.ZodString;
    scope: z.ZodString;
    bot_user_id: z.ZodString;
    app_id: z.ZodString;
    team: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>;
    enterprise: z.ZodObject<{
        name: z.ZodString;
        id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
    }, {
        id: string;
        name: string;
    }>;
    authed_user: z.ZodObject<{
        id: z.ZodString;
        scope: z.ZodString;
        access_token: z.ZodString;
        token_type: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        scope: string;
        access_token: string;
        token_type: string;
    }, {
        id: string;
        scope: string;
        access_token: string;
        token_type: string;
    }>;
    incoming_webhook: z.ZodOptional<z.ZodObject<{
        channel: z.ZodString;
        channel_id: z.ZodString;
        configuration_url: z.ZodString;
        url: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        url: string;
        channel: string;
        channel_id: string;
        configuration_url: string;
    }, {
        url: string;
        channel: string;
        channel_id: string;
        configuration_url: string;
    }>>;
}, "strip", z.ZodTypeAny, {
    team: {
        id: string;
        name: string;
    };
    scope: string;
    access_token: string;
    ok: boolean;
    token_type: string;
    bot_user_id: string;
    app_id: string;
    enterprise: {
        id: string;
        name: string;
    };
    authed_user: {
        id: string;
        scope: string;
        access_token: string;
        token_type: string;
    };
    incoming_webhook?: {
        url: string;
        channel: string;
        channel_id: string;
        configuration_url: string;
    } | undefined;
}, {
    team: {
        id: string;
        name: string;
    };
    scope: string;
    access_token: string;
    ok: boolean;
    token_type: string;
    bot_user_id: string;
    app_id: string;
    enterprise: {
        id: string;
        name: string;
    };
    authed_user: {
        id: string;
        scope: string;
        access_token: string;
        token_type: string;
    };
    incoming_webhook?: {
        url: string;
        channel: string;
        channel_id: string;
        configuration_url: string;
    } | undefined;
}>;
export type SlackOauthRedirectPayload = z.infer<typeof slackOauthRedirectPayload>;
export type IncomingWebhookPayload = z.infer<typeof incomingWebhook>;
/** ******************************************************************************
*  Create Slack Channel
******************************************************************************* */
export declare const createSlackChannelParams: z.ZodObject<{
    slackId: z.ZodString;
    name: z.ZodString;
    channelId: z.ZodString;
    webhookUrl: z.ZodOptional<z.ZodString>;
    configurationUrl: z.ZodOptional<z.ZodString>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    name: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    slackId: string;
    channelId: string;
    webhookUrl?: string | undefined;
    configurationUrl?: string | undefined;
}, {
    name: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    slackId: string;
    channelId: string;
    webhookUrl?: string | undefined;
    configurationUrl?: string | undefined;
}>;
export declare const createSlackChannelRequest: z.ZodObject<{
    params: z.ZodObject<{
        slackId: z.ZodString;
        name: z.ZodString;
        channelId: z.ZodString;
        webhookUrl: z.ZodOptional<z.ZodString>;
        configurationUrl: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
    }, {
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
    };
}, {
    params: {
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
    };
}>;
export declare const createSlackChannelResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    channel: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        slackId: z.ZodString;
        name: z.ZodString;
        channelId: z.ZodString;
        webhookUrl: z.ZodOptional<z.ZodString>;
        configurationUrl: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        botId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    }, {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    channel?: {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    channel?: {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    } | undefined;
}>;
export type CreateSlackChannelParams = z.infer<typeof createSlackChannelParams>;
export type CreateSlackChannelRequest = z.infer<typeof createSlackChannelRequest>;
export type CreateSlackChannelResponse = z.infer<typeof createSlackChannelResponse>;
/** ******************************************************************************
*  Get Slack Channel
******************************************************************************* */
export declare const getSlackChannelParams: z.ZodObject<{
    channelId: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    channelId?: string | undefined;
    name?: string | undefined;
}, {
    channelId?: string | undefined;
    name?: string | undefined;
}>;
export declare const getSlackChannelRequest: z.ZodObject<{
    params: z.ZodObject<{
        channelId: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        channelId?: string | undefined;
        name?: string | undefined;
    }, {
        channelId?: string | undefined;
        name?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        channelId?: string | undefined;
        name?: string | undefined;
    };
}, {
    params: {
        channelId?: string | undefined;
        name?: string | undefined;
    };
}>;
export declare const getSlackChannelResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    channel: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        slackId: z.ZodString;
        name: z.ZodString;
        channelId: z.ZodString;
        webhookUrl: z.ZodOptional<z.ZodString>;
        configurationUrl: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        botId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    }, {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    channel?: {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    channel?: {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    } | null | undefined;
}>;
export type GetSlackChannelParams = z.infer<typeof getSlackChannelParams>;
export type GetSlackChannelRequest = z.infer<typeof getSlackChannelRequest>;
export type GetSlackChannelResponse = z.infer<typeof getSlackChannelResponse>;
/** ******************************************************************************
*  Slack Message
******************************************************************************* */
export declare const slackMessageRequest: z.ZodObject<{
    channel: z.ZodObject<{
        _id: z.ZodString;
        slackId: z.ZodString;
        name: z.ZodString;
        channelId: z.ZodString;
        webhookUrl: z.ZodOptional<z.ZodString>;
        configurationUrl: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        botId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    }, {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    }>;
    slack: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        access_token: z.ZodString;
        scope: z.ZodString;
        team: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
        }, {
            id: string;
            name: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
        authedUser: z.ZodObject<{
            id: z.ZodString;
            scope: z.ZodString;
            accessToken: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            scope: string;
            accessToken: string;
        }, {
            id: string;
            scope: string;
            accessToken: string;
        }>;
        appId: z.ZodOptional<z.ZodString>;
        botId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    }, {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    channel: {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    };
    slack?: {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    } | undefined;
}, {
    channel: {
        _id: string;
        name: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        slackId: string;
        channelId: string;
        webhookUrl?: string | undefined;
        configurationUrl?: string | undefined;
        botId?: string | undefined;
    };
    slack?: {
        team: {
            id: string;
            name: string;
        };
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        scope: string;
        access_token: string;
        authedUser: {
            id: string;
            scope: string;
            accessToken: string;
        };
        appId?: string | undefined;
        botId?: string | undefined;
    } | undefined;
}>;
export declare const slackRegisterRequest: z.ZodObject<{
    botId: z.ZodString;
    channelId: z.ZodString;
    teamId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    botId: string;
    channelId: string;
    teamId?: string | undefined;
}, {
    botId: string;
    channelId: string;
    teamId?: string | undefined;
}>;
export declare const slackRegisterResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    botId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    message: z.ZodOptional<z.ZodString>;
    block: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    botId?: string | null | undefined;
    message?: string | undefined;
    block?: {} | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    botId?: string | null | undefined;
    message?: string | undefined;
    block?: {} | null | undefined;
}>;
export type SlackRegisterResponse = z.infer<typeof slackRegisterResponse>;
export type SlackRegisterRequest = z.infer<typeof slackRegisterRequest>;
export type SlackMessageRequest = z.infer<typeof slackMessageRequest>;
