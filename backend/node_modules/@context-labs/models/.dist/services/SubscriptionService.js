"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.superSetSubscriptionUsageLimitsResponse = exports.superSetSubscriptionUsageLimitsRequest = exports.superSetSubscriptionUsageLimitsParams = exports.listSubscriptionsResponse = exports.listSubscriptionsRequest = exports.listSubscriptionsParams = exports.getSubscriptionResponse = exports.getSubscriptionRequest = exports.getSubscriptionParams = exports.latestSubscriptionResponse = exports.latestSubscriptionRequest = exports.latestSubscriptionParams = exports.updateLatestSubscriptionResponse = exports.updateLatestSubscriptionRequest = exports.updateLatestSubscriptionParams = exports.syncSubscriptionUpgradeResponse = exports.syncSubscriptionUpgradeRequest = exports.syncSubscriptionUpgradeParams = exports.finalizeUpgradeSubscriptionResponse = exports.finalizeUpgradeSubscriptionRequest = exports.finalizeUpgradeSubscriptionParams = exports.uprgadeSubscriptionResponse = exports.uprgadeSubscriptionRequest = exports.uprgadeSubscriptionParams = exports.stageUpgradeSubscriptionResponse = exports.stageUpgradeSubscriptionRequest = exports.stageUpgradeSubscriptionParams = exports.createSubscriptionResponse = exports.createSubscriptionRequest = exports.createSubscriptionParams = exports.subscription = exports.subscriptionUpgrade = exports.zSubscriptionStatus = void 0;
const zod_1 = __importDefault(require("zod"));
const Usage_1 = require("../interfaces/Usage");
const common_1 = require("../interfaces/common");
const Metadata_1 = require("../interfaces/Metadata");
const InvoiceService_1 = require("./InvoiceService");
exports.zSubscriptionStatus = zod_1.default.enum(['Pending', 'Active', 'Canceled']);
exports.subscriptionUpgrade = zod_1.default.object({
    productId: zod_1.default.string(),
    priceId: zod_1.default.string(),
    botId: zod_1.default.string().nullable(),
    sourceIds: zod_1.default.array(zod_1.default.string()).nullable(),
});
exports.subscription = zod_1.default.object({
    _id: zod_1.default.string(),
    organizationId: zod_1.default.string(),
    stripeCustomerId: zod_1.default.string(),
    stripeSubscriptionId: zod_1.default.string(),
    stripeProductId: zod_1.default.string(),
    stripePriceId: zod_1.default.string(),
    status: exports.zSubscriptionStatus,
    upgrade: exports.subscriptionUpgrade.nullable(),
    usageLimits: Usage_1.usage,
    meta: Metadata_1.metadata,
});
/** ******************************************************************************
*  Create Subscription
******************************************************************************* */
exports.createSubscriptionParams = zod_1.default.object({
    stripeCustomerId: zod_1.default.string(),
    stripeSubscriptionId: zod_1.default.string().nullable(),
    stripeProductId: zod_1.default.string().nullable(),
    stripePriceId: zod_1.default.string().nullable(),
    status: exports.zSubscriptionStatus,
});
exports.createSubscriptionRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.createSubscriptionParams,
}));
exports.createSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
}));
/** ******************************************************************************
*  Stage Upgrade Subscription
******************************************************************************* */
exports.stageUpgradeSubscriptionParams = zod_1.default.object({
    botId: zod_1.default.string().nullable(),
    sourceIds: zod_1.default.array(zod_1.default.string()).nullable(),
    usage: Usage_1.updateUsage.optional(),
});
exports.stageUpgradeSubscriptionRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.stageUpgradeSubscriptionParams,
}));
exports.stageUpgradeSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
}));
/** ******************************************************************************
*  Upgrade Subscription
******************************************************************************* */
exports.uprgadeSubscriptionParams = zod_1.default.object({
    productId: zod_1.default.string(),
    priceId: zod_1.default.string(),
});
exports.uprgadeSubscriptionRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.uprgadeSubscriptionParams,
}));
exports.uprgadeSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
    sessionUrl: zod_1.default.string().nullable().optional(),
    redirectUrl: zod_1.default.string().nullable().optional(),
}));
/** ******************************************************************************
*  Finalize Subscription
******************************************************************************* */
exports.finalizeUpgradeSubscriptionParams = zod_1.default.object({
    stripeSubscriptionId: zod_1.default.string(),
});
exports.finalizeUpgradeSubscriptionRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.finalizeUpgradeSubscriptionParams,
}));
exports.finalizeUpgradeSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
}));
/** ******************************************************************************
*  Sync Subscription Upgrade
******************************************************************************* */
exports.syncSubscriptionUpgradeParams = zod_1.default.object({});
exports.syncSubscriptionUpgradeRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.syncSubscriptionUpgradeParams,
}));
exports.syncSubscriptionUpgradeResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
}));
/** ******************************************************************************
*  Update Latest Subscription
******************************************************************************* */
exports.updateLatestSubscriptionParams = exports.subscription;
exports.updateLatestSubscriptionRequest = common_1.serviceRequest.merge(zod_1.default.object({
    params: exports.updateLatestSubscriptionParams,
}));
exports.updateLatestSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
}));
/** ******************************************************************************
*  Get Latest Subscription
******************************************************************************* */
exports.latestSubscriptionParams = zod_1.default.object({
    organizationId: zod_1.default.string().optional(),
});
exports.latestSubscriptionRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.latestSubscriptionParams,
}));
exports.latestSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
}));
/** ******************************************************************************
*  Get Subscription
******************************************************************************* */
exports.getSubscriptionParams = zod_1.default.object({
    subscriptionId: zod_1.default.string(),
});
exports.getSubscriptionRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.getSubscriptionParams,
}));
exports.getSubscriptionResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.nullable().optional(),
}));
/** ******************************************************************************
*  List Subscriptions
******************************************************************************* */
exports.listSubscriptionsParams = zod_1.default.object({});
exports.listSubscriptionsRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.listSubscriptionsParams,
}));
exports.listSubscriptionsResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscriptions: zod_1.default.array(exports.subscription).optional(),
}));
/** ******************************************************************************
*  Super Set Subscription Usage Limits
******************************************************************************* */
exports.superSetSubscriptionUsageLimitsParams = zod_1.default.object({
    usageLimits: Usage_1.usage,
    resetCurrentUsage: zod_1.default.boolean(),
});
exports.superSetSubscriptionUsageLimitsRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.superSetSubscriptionUsageLimitsParams,
}));
exports.superSetSubscriptionUsageLimitsResponse = common_1.serviceResponse.merge(zod_1.default.object({
    subscription: exports.subscription.optional(),
    invoice: InvoiceService_1.invoice.optional(),
}));
//# sourceMappingURL=SubscriptionService.js.map