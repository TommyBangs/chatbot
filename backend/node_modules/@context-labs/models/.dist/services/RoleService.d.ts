import z from 'zod';
export declare const zRoleTypes: z.ZodEnum<["Owner", "Member"]>;
export declare const role: z.ZodObject<{
    _id: z.ZodString;
    organizationId: z.ZodString;
    userId: z.ZodNullable<z.ZodString>;
    userEmail: z.ZodNullable<z.ZodString>;
    type: z.ZodEnum<["Owner", "Member"]>;
    acceptedAt: z.ZodNullable<z.ZodNumber>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "Owner" | "Member";
    userId: string | null;
    organizationId: string;
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    userEmail: string | null;
    acceptedAt: number | null;
}, {
    type: "Owner" | "Member";
    userId: string | null;
    organizationId: string;
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    userEmail: string | null;
    acceptedAt: number | null;
}>;
export type Role = z.infer<typeof role>;
export type RoleTypes = z.infer<typeof zRoleTypes>;
export interface RoleService {
    create(request: CreateRoleRequest): Promise<CreateRoleResponse>;
    delete(request: DeleteRoleRequest): Promise<DeleteRoleResponse>;
    accept(request: AcceptRoleRequest): Promise<AcceptRoleResponse>;
    assign(request: AssignRolesRequest): Promise<AssignRolesResponse>;
    get(request: GetRoleRequest): Promise<GetRoleResponse>;
    list(request: ListRolesRequest): Promise<ListRolesResponse>;
    superAssignOwner(request: SuperAssignOwnerRoleRequest): Promise<SuperAssignOwnerRoleResponse>;
}
/** ******************************************************************************
*  Create Role
******************************************************************************* */
export declare const createRoleParams: z.ZodObject<{
    userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    userEmail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodEnum<["Owner", "Member"]>;
}, "strip", z.ZodTypeAny, {
    type: "Owner" | "Member";
    userId?: string | null | undefined;
    userEmail?: string | null | undefined;
}, {
    type: "Owner" | "Member";
    userId?: string | null | undefined;
    userEmail?: string | null | undefined;
}>;
export declare const createRoleRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        userId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        userEmail: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["Owner", "Member"]>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId?: string | null | undefined;
        userEmail?: string | null | undefined;
    }, {
        type: "Owner" | "Member";
        userId?: string | null | undefined;
        userEmail?: string | null | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "Owner" | "Member";
        userId?: string | null | undefined;
        userEmail?: string | null | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        type: "Owner" | "Member";
        userId?: string | null | undefined;
        userEmail?: string | null | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const createRoleResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    role: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>>;
    user: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | undefined;
    user?: any;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | undefined;
    user?: any;
}>;
export type CreateRoleParams = z.infer<typeof createRoleParams>;
export type CreateRoleRequest = z.infer<typeof createRoleRequest>;
export type CreateRoleResponse = z.infer<typeof createRoleResponse>;
/** ******************************************************************************
*  Delete Role
******************************************************************************* */
export declare const deleteRoleParams: z.ZodObject<{
    _id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    _id: string;
}, {
    _id: string;
}>;
export declare const deleteRoleRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        _id: string;
    }, {
        _id: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id: string;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const deleteRoleResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    _id: z.ZodOptional<z.ZodString>;
    success: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    _id?: string | undefined;
    success?: boolean | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    _id?: string | undefined;
    success?: boolean | undefined;
}>;
export type DeleteRoleParams = z.infer<typeof deleteRoleParams>;
export type DeleteRoleRequest = z.infer<typeof deleteRoleRequest>;
export type DeleteRoleResponse = z.infer<typeof deleteRoleResponse>;
/** ******************************************************************************
*  Accept Role
******************************************************************************* */
export declare const acceptRoleParams: z.ZodObject<{
    _id: z.ZodString;
    accept: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    _id: string;
    accept: boolean;
}, {
    _id: string;
    accept: boolean;
}>;
export declare const acceptRoleRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodString;
        accept: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        accept: boolean;
    }, {
        _id: string;
        accept: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
        accept: boolean;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id: string;
        accept: boolean;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const acceptRoleResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    role: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | null | undefined;
}>;
export type AcceptRoleParams = z.infer<typeof acceptRoleParams>;
export type AcceptRoleRequest = z.infer<typeof acceptRoleRequest>;
export type AcceptRoleResponse = z.infer<typeof acceptRoleResponse>;
/** ******************************************************************************
*  Assign Roles
******************************************************************************* */
export declare const assignRolesParams: z.ZodObject<{
    userEmail: z.ZodString;
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userId: string;
    userEmail: string;
}, {
    userId: string;
    userEmail: string;
}>;
export declare const assignRolesRequest: z.ZodObject<{
    params: z.ZodObject<{
        userEmail: z.ZodString;
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
        userEmail: string;
    }, {
        userId: string;
        userEmail: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        userId: string;
        userEmail: string;
    };
}, {
    params: {
        userId: string;
        userEmail: string;
    };
}>;
export declare const assignRolesResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    roles: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    roles?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    roles?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
}>;
export type AssignRolesParams = z.infer<typeof assignRolesParams>;
export type AssignRolesRequest = z.infer<typeof assignRolesRequest>;
export type AssignRolesResponse = z.infer<typeof assignRolesResponse>;
/** ******************************************************************************
*  Get Role
******************************************************************************* */
export declare const getRoleParams: z.ZodObject<{
    roleId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    roleId: string;
}, {
    roleId: string;
}>;
export declare const getRoleRequest: z.ZodObject<{
    params: z.ZodObject<{
        roleId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        roleId: string;
    }, {
        roleId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        roleId: string;
    };
}, {
    params: {
        roleId: string;
    };
}>;
export declare const getRoleResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    role: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | null | undefined;
}>;
export type GetRoleParams = z.infer<typeof getRoleParams>;
export type GetRoleRequest = z.infer<typeof getRoleRequest>;
export type GetRoleResponse = z.infer<typeof getRoleResponse>;
/** ******************************************************************************
*  List Roles
******************************************************************************* */
export declare const listRolesParams: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const listRolesRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
}, "strip", z.ZodTypeAny, {
    params: {};
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {};
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const listRolesResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    user: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>, "many">>;
    organization: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    user?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
    organization?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    user?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
    organization?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }[] | undefined;
}>;
export type ListRolesParams = z.infer<typeof listRolesParams>;
export type ListRolesRequest = z.infer<typeof listRolesRequest>;
export type ListRolesResponse = z.infer<typeof listRolesResponse>;
/** ******************************************************************************
*  Super Assign Owner Role
******************************************************************************* */
export declare const superAssignOwnerRoleParams: z.ZodObject<{
    userId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    userId: string;
}, {
    userId: string;
}>;
export declare const superAssignOwnerRoleRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        userId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        userId: string;
    }, {
        userId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        userId: string;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        userId: string;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const superAssignOwnerRoleResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    role: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        userId: z.ZodNullable<z.ZodString>;
        userEmail: z.ZodNullable<z.ZodString>;
        type: z.ZodEnum<["Owner", "Member"]>;
        acceptedAt: z.ZodNullable<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }, {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    role?: {
        type: "Owner" | "Member";
        userId: string | null;
        organizationId: string;
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        userEmail: string | null;
        acceptedAt: number | null;
    } | undefined;
}>;
export type SuperAssignOwnerRoleParams = z.infer<typeof superAssignOwnerRoleParams>;
export type SuperAssignOwnerRoleRequest = z.infer<typeof superAssignOwnerRoleRequest>;
export type SuperAssignOwnerRoleResponse = z.infer<typeof superAssignOwnerRoleResponse>;
