import z from 'zod';
export declare const discordQuery: z.ZodObject<{
    _id: z.ZodString;
    discordId: z.ZodString;
    organizationId: z.ZodString;
    messageId: z.ZodString;
    helpful: z.ZodOptional<z.ZodBoolean>;
    queryId: z.ZodString;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    organizationId: string;
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    discordId: string;
    messageId: string;
    queryId: string;
    helpful?: boolean | undefined;
}, {
    organizationId: string;
    _id: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    discordId: string;
    messageId: string;
    queryId: string;
    helpful?: boolean | undefined;
}>;
export type DiscordQuery = z.infer<typeof discordQuery>;
export declare const createDiscordQueryParams: z.ZodObject<{
    discordId: z.ZodString;
    organizationId: z.ZodString;
    messageId: z.ZodString;
    helpful: z.ZodBoolean;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
    queryId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    organizationId: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    discordId: string;
    messageId: string;
    helpful: boolean;
    queryId: string;
}, {
    organizationId: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    discordId: string;
    messageId: string;
    helpful: boolean;
    queryId: string;
}>;
export declare const getDiscordQueryParams: z.ZodObject<{
    id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id: string;
}, {
    id: string;
}>;
export declare const getDiscordQueriesByServerIdParams: z.ZodObject<{
    serverId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    serverId: string;
}, {
    serverId: string;
}>;
export type CreateDiscordQueryParams = z.infer<typeof createDiscordQueryParams>;
export type GetDiscordQueryParams = z.infer<typeof getDiscordQueryParams>;
export type GetDiscordQueriesByServerIdParams = z.infer<typeof getDiscordQueriesByServerIdParams>;
export interface DiscordQueryService {
    create(createDiscordQueryParams: CreateDiscordQueryParams): Promise<DiscordQuery>;
}
