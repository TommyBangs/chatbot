import z from 'zod';
export declare const discordServer: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    registeredOn: z.ZodDate;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    registeredOn: Date;
}, {
    id: string;
    name: string;
    registeredOn: Date;
}>;
export declare const discord: z.ZodObject<{
    _id: z.ZodString;
    name: z.ZodString;
    botId: z.ZodString;
    server: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        registeredOn: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        registeredOn: Date;
    }, {
        id: string;
        name: string;
        registeredOn: Date;
    }>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    _id: string;
    name: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    botId: string;
    server: {
        id: string;
        name: string;
        registeredOn: Date;
    };
}, {
    _id: string;
    name: string;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    botId: string;
    server: {
        id: string;
        name: string;
        registeredOn: Date;
    };
}>;
export type Discord = z.infer<typeof discord>;
export type DiscordServer = z.infer<typeof discordServer>;
export interface DiscordService {
    startService(): void;
}
/** ******************************************************************************
*  Create Discord
******************************************************************************* */
export declare const createDiscordParams: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    botId: z.ZodString;
    server: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        registeredOn: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        registeredOn: Date;
    }, {
        id: string;
        name: string;
        registeredOn: Date;
    }>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    botId: string;
    server: {
        id: string;
        name: string;
        registeredOn: Date;
    };
    name?: string | undefined;
}, {
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    botId: string;
    server: {
        id: string;
        name: string;
        registeredOn: Date;
    };
    name?: string | undefined;
}>;
export declare const createDiscordRequest: z.ZodObject<{
    params: z.ZodObject<{
        name: z.ZodOptional<z.ZodString>;
        botId: z.ZodString;
        server: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            registeredOn: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            registeredOn: Date;
        }, {
            id: string;
            name: string;
            registeredOn: Date;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        server: {
            id: string;
            name: string;
            registeredOn: Date;
        };
        name?: string | undefined;
    }, {
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        server: {
            id: string;
            name: string;
            registeredOn: Date;
        };
        name?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        server: {
            id: string;
            name: string;
            registeredOn: Date;
        };
        name?: string | undefined;
    };
}, {
    params: {
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        server: {
            id: string;
            name: string;
            registeredOn: Date;
        };
        name?: string | undefined;
    };
}>;
export type CreateDiscordParams = z.infer<typeof createDiscordParams>;
export type CreateDiscordRequest = z.infer<typeof createDiscordRequest>;
/** ******************************************************************************
*  Get Discord By Server Id
******************************************************************************* */
export declare const getDiscordByServerIdParams: z.ZodObject<{
    serverId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    serverId: string;
}, {
    serverId: string;
}>;
export declare const getDiscordByServerIdRequest: z.ZodObject<{
    params: z.ZodObject<{
        serverId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        serverId: string;
    }, {
        serverId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        serverId: string;
    };
}, {
    params: {
        serverId: string;
    };
}>;
export type GetDiscordByServerIdParams = z.infer<typeof getDiscordByServerIdParams>;
export type GetDiscordByServerIdRequest = z.infer<typeof getDiscordByServerIdRequest>;
/** ******************************************************************************
*  Get Bot
******************************************************************************* */
export declare const getBotParams: z.ZodObject<{
    botId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    botId: string;
}, {
    botId: string;
}>;
export declare const getBotRequest: z.ZodObject<{
    params: z.ZodObject<{
        botId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        botId: string;
    }, {
        botId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        botId: string;
    };
}, {
    params: {
        botId: string;
    };
}>;
export type GetBotParams = z.infer<typeof getBotParams>;
export type GetBotRequest = z.infer<typeof getBotRequest>;
