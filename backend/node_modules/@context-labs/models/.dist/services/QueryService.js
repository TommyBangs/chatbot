"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.countQueriesResponse = exports.countQueriesRequest = exports.countQueriesParams = exports.listQueriesResponse = exports.listQueriesRequest = exports.listQueriesParams = exports.getQueryResponse = exports.getQueryRequest = exports.getQueryParams = exports.addQueryEditResponse = exports.addQueryEditRequest = exports.addQueryEditParams = exports.setQueryFeedbackResponse = exports.setQueryFeedbackRequest = exports.setQueryFeedbackParams = exports.createQueryResponse = exports.createQueryRequest = exports.createQueryParams = exports.query = exports.queryOrigin = exports.queryEdit = void 0;
const zod_1 = __importDefault(require("zod"));
const common_1 = require("../interfaces/common");
const Metadata_1 = require("../interfaces/Metadata");
const Geolocation_1 = require("../interfaces/Geolocation");
const GPTModels_1 = require("../enums/GPTModels");
const InstallationChannels_1 = require("../enums/InstallationChannels");
const SearchTypes_1 = require("../enums/SearchTypes");
exports.queryEdit = zod_1.default.object({
    _id: zod_1.default.string().optional(),
    value: zod_1.default.string(),
    meta: Metadata_1.metadata,
});
exports.queryOrigin = zod_1.default.object({
    channel: InstallationChannels_1.zInstallationChannels,
    originId: zod_1.default.string().optional(),
    originName: zod_1.default.string().optional(),
    originChannelId: zod_1.default.string().optional(),
    originChannelName: zod_1.default.string().optional(),
});
exports.query = zod_1.default.object({
    _id: zod_1.default.string(),
    distinctId: zod_1.default.string(),
    organizationId: zod_1.default.string(),
    botId: zod_1.default.string(),
    sourceIds: zod_1.default.array(zod_1.default.string()),
    snippetIds: zod_1.default.array(zod_1.default.string()),
    input: zod_1.default.string(),
    output: zod_1.default.string(),
    helpful: zod_1.default.boolean().nullable(),
    mark: zod_1.default.boolean().nullable(),
    edits: zod_1.default.array(exports.queryEdit),
    model: GPTModels_1.zGPTModels.nullable(),
    embedding: zod_1.default.array(zod_1.default.number()).nullable(),
    type: SearchTypes_1.zSearchTypes,
    origin: exports.queryOrigin.nullable(),
    cachedQueryId: zod_1.default.string().nullable(),
    geolocation: Geolocation_1.geolocation.nullable(),
    lang: zod_1.default.string().optional(),
    meta: Metadata_1.metadata,
});
/** ******************************************************************************
*  Create Query
******************************************************************************* */
exports.createQueryParams = zod_1.default.object({
    distinctId: zod_1.default.string(),
    organizationId: zod_1.default.string(),
    botId: zod_1.default.string(),
    sourceIds: zod_1.default.array(zod_1.default.string()),
    snippetIds: zod_1.default.array(zod_1.default.string()),
    input: zod_1.default.string(),
    output: zod_1.default.string(),
    model: GPTModels_1.zGPTModels.nullable(),
    embedding: zod_1.default.array(zod_1.default.number()).nullable(),
    type: SearchTypes_1.zSearchTypes,
    origin: exports.queryOrigin.nullable(),
    cachedQueryId: zod_1.default.string().nullable(),
    geolocation: Geolocation_1.geolocation.nullable(),
    lang: zod_1.default.string().optional(),
});
exports.createQueryRequest = common_1.serviceRequest.merge(zod_1.default.object({
    params: exports.createQueryParams,
}));
exports.createQueryResponse = common_1.serviceResponse.merge(zod_1.default.object({
    query: exports.query.optional(),
}));
/** ******************************************************************************
*  Set Query Feedback
******************************************************************************* */
exports.setQueryFeedbackParams = zod_1.default.object({
    queryId: zod_1.default.string(),
    helpful: zod_1.default.boolean().nullable(),
});
exports.setQueryFeedbackRequest = common_1.serviceRequest.merge(zod_1.default.object({
    params: exports.setQueryFeedbackParams,
}));
exports.setQueryFeedbackResponse = common_1.serviceResponse.merge(zod_1.default.object({
    query: exports.query.optional(),
}));
/** ******************************************************************************
*  Set Query Correction
******************************************************************************* */
exports.addQueryEditParams = zod_1.default.object({
    _id: zod_1.default.string(),
    mark: zod_1.default.boolean().nullable(),
    edit: zod_1.default.string().nullable(),
});
exports.addQueryEditRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.addQueryEditParams,
}));
exports.addQueryEditResponse = common_1.serviceResponse.merge(zod_1.default.object({
    query: exports.query.optional(),
}));
/** ******************************************************************************
*  Get Query
******************************************************************************* */
exports.getQueryParams = zod_1.default.object({
    queryId: zod_1.default.string(),
});
exports.getQueryRequest = common_1.serviceRequest.merge(zod_1.default.object({
    params: exports.getQueryParams,
}));
exports.getQueryResponse = common_1.serviceResponse.merge(zod_1.default.object({
    query: exports.query.nullable().optional(),
}));
/** ******************************************************************************
*  List Queries
******************************************************************************* */
exports.listQueriesParams = zod_1.default.object({
    botId: zod_1.default.string().optional(),
    sourceIds: zod_1.default.array(zod_1.default.string()).optional(),
    search: zod_1.default.string().optional(),
    offset: zod_1.default.number().optional(),
    pageSize: zod_1.default.number().optional(),
    isSuper: zod_1.default.boolean().optional(),
});
exports.listQueriesRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.listQueriesParams,
}));
exports.listQueriesResponse = common_1.serviceResponse.merge(zod_1.default.object({
    queries: zod_1.default.array(exports.query).optional(),
    total: zod_1.default.number().optional(),
}));
/** ******************************************************************************
*  Count Queries
******************************************************************************* */
exports.countQueriesParams = zod_1.default.object({
    botId: zod_1.default.string().optional(),
    sourceIds: zod_1.default.array(zod_1.default.string()).optional(),
    search: zod_1.default.string().optional(),
    isSuper: zod_1.default.boolean().optional(),
});
exports.countQueriesRequest = common_1.authedServiceRequest.merge(zod_1.default.object({
    params: exports.countQueriesParams,
}));
exports.countQueriesResponse = common_1.serviceResponse.merge(zod_1.default.object({
    count: zod_1.default.number().optional(),
}));
//# sourceMappingURL=QueryService.js.map