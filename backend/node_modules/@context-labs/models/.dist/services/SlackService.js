"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.slackRegisterResponse = exports.slackRegisterRequest = exports.slackMessageRequest = exports.getSlackChannelResponse = exports.getSlackChannelRequest = exports.getSlackChannelParams = exports.createSlackChannelResponse = exports.createSlackChannelRequest = exports.createSlackChannelParams = exports.slackOauthRedirectPayload = exports.incomingWebhook = exports.authedUserSchema = exports.enterpriseSchema = exports.getSlackResponse = exports.getSlackByAccessTokenRequest = exports.getSlackParamsByAccessToken = exports.createSlackResponse = exports.createSlackRequest = exports.createSlackParams = exports.slackChannel = exports.slack = exports.slackAuthedUser = exports.slackTeam = void 0;
const zod_1 = __importDefault(require("zod"));
const Metadata_1 = require("../interfaces/Metadata");
const common_1 = require("../interfaces/common");
exports.slackTeam = zod_1.default.object({
    id: zod_1.default.string(),
    name: zod_1.default.string(),
});
exports.slackAuthedUser = zod_1.default.object({
    id: zod_1.default.string(),
    scope: zod_1.default.string(),
    accessToken: zod_1.default.string(),
});
exports.slack = zod_1.default.object({
    _id: zod_1.default.string(),
    access_token: zod_1.default.string(),
    scope: zod_1.default.string(),
    team: exports.slackTeam,
    meta: Metadata_1.metadata,
    authedUser: exports.slackAuthedUser,
    appId: zod_1.default.string().optional(),
    botId: zod_1.default.string().optional(),
});
exports.slackChannel = zod_1.default.object({
    _id: zod_1.default.string(),
    slackId: zod_1.default.string(),
    name: zod_1.default.string(),
    channelId: zod_1.default.string(),
    webhookUrl: zod_1.default.string().optional(),
    configurationUrl: zod_1.default.string().optional(),
    meta: Metadata_1.metadata,
    botId: zod_1.default.string().optional(),
});
/** ******************************************************************************
*  Create Slack
******************************************************************************* */
exports.createSlackParams = zod_1.default.object({
    access_token: zod_1.default.string(),
    scope: zod_1.default.string(),
    team: exports.slackTeam,
    meta: Metadata_1.metadata,
    authedUser: exports.slackAuthedUser,
    botId: zod_1.default.string().optional(),
    appId: zod_1.default.string().optional(),
});
exports.createSlackRequest = zod_1.default.object({
    params: exports.createSlackParams,
});
exports.createSlackResponse = common_1.serviceResponse.merge(zod_1.default.object({
    slack: exports.slack.optional(),
}));
/** ******************************************************************************
*  Get Slack
******************************************************************************* */
exports.getSlackParamsByAccessToken = zod_1.default.object({
    access_token: zod_1.default.string(),
});
exports.getSlackByAccessTokenRequest = zod_1.default.object({
    params: exports.getSlackParamsByAccessToken,
});
exports.getSlackResponse = common_1.serviceResponse.merge(zod_1.default.object({
    slack: exports.slack.nullable().optional(),
}));
/** ******************************************************************************
*  Slack OAuth Redirect
******************************************************************************* */
exports.enterpriseSchema = zod_1.default.object({
    name: zod_1.default.string(),
    id: zod_1.default.string(),
});
exports.authedUserSchema = zod_1.default.object({
    id: zod_1.default.string(),
    scope: zod_1.default.string(),
    access_token: zod_1.default.string(),
    token_type: zod_1.default.string(),
});
exports.incomingWebhook = zod_1.default.object({
    channel: zod_1.default.string(),
    channel_id: zod_1.default.string(),
    configuration_url: zod_1.default.string(),
    url: zod_1.default.string(),
});
exports.slackOauthRedirectPayload = zod_1.default.object({
    ok: zod_1.default.boolean(),
    access_token: zod_1.default.string(),
    token_type: zod_1.default.string(),
    scope: zod_1.default.string(),
    bot_user_id: zod_1.default.string(),
    app_id: zod_1.default.string(),
    team: exports.slackTeam,
    enterprise: exports.enterpriseSchema,
    authed_user: exports.authedUserSchema,
    incoming_webhook: exports.incomingWebhook.optional(),
});
/** ******************************************************************************
*  Create Slack Channel
******************************************************************************* */
exports.createSlackChannelParams = zod_1.default.object({
    slackId: zod_1.default.string(),
    name: zod_1.default.string(),
    channelId: zod_1.default.string(),
    webhookUrl: zod_1.default.string().optional(),
    configurationUrl: zod_1.default.string().optional(),
    meta: Metadata_1.metadata,
});
exports.createSlackChannelRequest = zod_1.default.object({
    params: exports.createSlackChannelParams,
});
exports.createSlackChannelResponse = common_1.serviceResponse.merge(zod_1.default.object({
    channel: exports.slackChannel.optional(),
}));
/** ******************************************************************************
*  Get Slack Channel
******************************************************************************* */
exports.getSlackChannelParams = zod_1.default.object({
    channelId: zod_1.default.string().optional(),
    name: zod_1.default.string().optional(),
});
exports.getSlackChannelRequest = zod_1.default.object({
    params: exports.getSlackChannelParams,
});
exports.getSlackChannelResponse = common_1.serviceResponse.merge(zod_1.default.object({
    channel: exports.slackChannel.nullable().optional(),
}));
/** ******************************************************************************
*  Slack Message
******************************************************************************* */
exports.slackMessageRequest = zod_1.default.object({
    channel: exports.slackChannel,
    slack: exports.slack.optional(),
});
exports.slackRegisterRequest = zod_1.default.object({
    botId: zod_1.default.string(),
    channelId: zod_1.default.string(),
    teamId: zod_1.default.string().optional(),
});
exports.slackRegisterResponse = common_1.serviceResponse.merge(zod_1.default.object({
    botId: zod_1.default.string().nullable().optional(),
    message: zod_1.default.string().optional(),
    block: zod_1.default.object({}).nullable().optional(),
}));
//# sourceMappingURL=SlackService.js.map