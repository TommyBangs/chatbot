import z from 'zod';
export declare const zSourceTypes: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
export declare const source: z.ZodObject<{
    _id: z.ZodString;
    organizationId: z.ZodString;
    syncId: z.ZodOptional<z.ZodString>;
    title: z.ZodString;
    description: z.ZodOptional<z.ZodString>;
    imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
    importUrl: z.ZodOptional<z.ZodString>;
    transcribe: z.ZodOptional<z.ZodBoolean>;
    regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    durationSeconds: z.ZodOptional<z.ZodNumber>;
    documentCount: z.ZodNumber;
    archived: z.ZodOptional<z.ZodBoolean>;
    meta: z.ZodObject<{
        createdAt: z.ZodOptional<z.ZodNumber>;
        createdBy: z.ZodOptional<z.ZodString>;
        lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
        lastUpdatedBy: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }, {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
    _id: string;
    organizationId: string;
    title: string;
    documentCount: number;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    syncId?: string | undefined;
    description?: string | undefined;
    imageFileId?: string | null | undefined;
    importUrl?: string | undefined;
    transcribe?: boolean | undefined;
    regex?: string | null | undefined;
    durationSeconds?: number | undefined;
    archived?: boolean | undefined;
}, {
    type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
    _id: string;
    organizationId: string;
    title: string;
    documentCount: number;
    meta: {
        createdAt?: number | undefined;
        createdBy?: string | undefined;
        lastUpdatedAt?: number | undefined;
        lastUpdatedBy?: string | undefined;
    };
    syncId?: string | undefined;
    description?: string | undefined;
    imageFileId?: string | null | undefined;
    importUrl?: string | undefined;
    transcribe?: boolean | undefined;
    regex?: string | null | undefined;
    durationSeconds?: number | undefined;
    archived?: boolean | undefined;
}>;
export declare const sourceFiles: z.ZodObject<{
    imageFile: z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        name: z.ZodString;
        mimetype: z.ZodString;
        encoding: z.ZodString;
        sizeBytes: z.ZodOptional<z.ZodNumber>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        url: z.ZodString;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }>>;
    coverImageFile: z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        name: z.ZodString;
        mimetype: z.ZodString;
        encoding: z.ZodString;
        sizeBytes: z.ZodOptional<z.ZodNumber>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        url: z.ZodString;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }>>;
    sponsorImageFile: z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        name: z.ZodString;
        mimetype: z.ZodString;
        encoding: z.ZodString;
        sizeBytes: z.ZodOptional<z.ZodNumber>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        url: z.ZodString;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }, {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    imageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
    coverImageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
    sponsorImageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
}, {
    imageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
    coverImageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
    sponsorImageFile: {
        _id: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        name: string;
        mimetype: string;
        encoding: string;
        url: string;
        sizeBytes?: number | undefined;
        durationSeconds?: number | undefined;
    } | null;
}>;
export declare const sourceImportInfo: z.ZodObject<{
    title: z.ZodString;
    imageUrl: z.ZodOptional<z.ZodString>;
    documentCount: z.ZodNumber;
    durationHours: z.ZodOptional<z.ZodNumber>;
    durationSeconds: z.ZodOptional<z.ZodNumber>;
    transcriptionCost: z.ZodOptional<z.ZodNumber>;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    title: string;
    documentCount: number;
    imageUrl?: string | undefined;
    durationHours?: number | undefined;
    durationSeconds?: number | undefined;
    transcriptionCost?: number | undefined;
    error?: string | undefined;
}, {
    title: string;
    documentCount: number;
    imageUrl?: string | undefined;
    durationHours?: number | undefined;
    durationSeconds?: number | undefined;
    transcriptionCost?: number | undefined;
    error?: string | undefined;
}>;
export type SourceTypes = z.infer<typeof zSourceTypes>;
export type Source = z.infer<typeof source>;
export type SourceFiles = z.infer<typeof sourceFiles>;
export type SourceImportInfo = z.infer<typeof sourceImportInfo>;
export type SourceResolved = Source & {
    files: SourceFiles;
};
export interface SourceService {
    add(request: AddSourceRequest): Promise<AddSourceResponse>;
    edit(request: EditSourceRequest): Promise<EditSourceResponse>;
    sync(request: SyncSourceRequest): Promise<SyncSourceResponse>;
    archive(request: ArchiveSourceRequest): Promise<ArchiveSourceResponse>;
    get(request: GetSourceRequest): Promise<GetSourceResponse>;
    list(request: ListSourcesRequest): Promise<ListSourcesResponse>;
    importInfo(request: GetSourceImportInfoRequest): Promise<GetSourceImportInfoResponse>;
}
/** ******************************************************************************
*  Add Source
******************************************************************************* */
export declare const addSourceParams: z.ZodObject<{
    botId: z.ZodOptional<z.ZodString>;
    title: z.ZodString;
    description: z.ZodString;
    imageFileId: z.ZodString;
    importUrl: z.ZodOptional<z.ZodString>;
    transcribe: z.ZodOptional<z.ZodBoolean>;
    regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    stripePriceId: z.ZodOptional<z.ZodString>;
    type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
}, "strip", z.ZodTypeAny, {
    type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
    title: string;
    description: string;
    imageFileId: string;
    botId?: string | undefined;
    importUrl?: string | undefined;
    transcribe?: boolean | undefined;
    regex?: string | null | undefined;
    stripePriceId?: string | undefined;
}, {
    type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
    title: string;
    description: string;
    imageFileId: string;
    botId?: string | undefined;
    importUrl?: string | undefined;
    transcribe?: boolean | undefined;
    regex?: string | null | undefined;
    stripePriceId?: string | undefined;
}>;
export declare const addSourceRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        botId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        stripePriceId: z.ZodOptional<z.ZodString>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        title: string;
        description: string;
        imageFileId: string;
        botId?: string | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        stripePriceId?: string | undefined;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const addSourceResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    source: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>>;
    sync: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        type: z.ZodEnum<["Initial", "Manual", "Automatic"]>;
        status: z.ZodEnum<["Pending", "Running", "Complete", "Failed"]>;
        message: z.ZodOptional<z.ZodString>;
        info: z.ZodObject<{
            total: z.ZodNumber;
            new: z.ZodNumber;
            existing: z.ZodNumber;
            removed: z.ZodNumber;
            pending: z.ZodNumber;
            running: z.ZodNumber;
            completed: z.ZodNumber;
            failed: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        }, {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    }, {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    }>>>;
    subscription: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        stripeCustomerId: z.ZodString;
        stripeSubscriptionId: z.ZodString;
        stripeProductId: z.ZodString;
        stripePriceId: z.ZodString;
        status: z.ZodEnum<["Pending", "Active", "Canceled"]>;
        upgrade: z.ZodNullable<z.ZodObject<{
            productId: z.ZodString;
            priceId: z.ZodString;
            botId: z.ZodNullable<z.ZodString>;
            sourceIds: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        }, {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        }>>;
        usageLimits: z.ZodObject<{
            credits: z.ZodNumber;
            documents: z.ZodNumber;
            syncs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            credits: number;
            documents: number;
            syncs: number;
        }, {
            credits: number;
            documents: number;
            syncs: number;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    }, {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | undefined;
    sync?: {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    } | null | undefined;
    subscription?: {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | undefined;
    sync?: {
        type: "Initial" | "Manual" | "Automatic";
        status: "Pending" | "Running" | "Complete" | "Failed";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceId: string;
        info: {
            total: number;
            new: number;
            existing: number;
            removed: number;
            pending: number;
            running: number;
            completed: number;
            failed: number;
        };
        message?: string | undefined;
    } | null | undefined;
    subscription?: {
        status: "Pending" | "Active" | "Canceled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string;
        stripeCustomerId: string;
        stripeSubscriptionId: string;
        stripeProductId: string;
        upgrade: {
            botId: string | null;
            productId: string;
            priceId: string;
            sourceIds: string[] | null;
        } | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
    } | null | undefined;
}>;
export type AddSourceParams = z.infer<typeof addSourceParams>;
export type AddSourceRequest = z.infer<typeof addSourceRequest>;
export type AddSourceResponse = z.infer<typeof addSourceResponse>;
/** ******************************************************************************
*  Edit Source
******************************************************************************* */
export declare const editSourceParams: z.ZodObject<{
    _id: z.ZodString;
    title: z.ZodString;
    description: z.ZodString;
    imageFileId: z.ZodString;
    transcribe: z.ZodBoolean;
    regex: z.ZodNullable<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    _id: string;
    title: string;
    description: string;
    imageFileId: string;
    transcribe: boolean;
    regex: string | null;
}, {
    _id: string;
    title: string;
    description: string;
    imageFileId: string;
    transcribe: boolean;
    regex: string | null;
}>;
export declare const editSourceRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodString;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        transcribe: z.ZodBoolean;
        regex: z.ZodNullable<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        title: string;
        description: string;
        imageFileId: string;
        transcribe: boolean;
        regex: string | null;
    }, {
        _id: string;
        title: string;
        description: string;
        imageFileId: string;
        transcribe: boolean;
        regex: string | null;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
        title: string;
        description: string;
        imageFileId: string;
        transcribe: boolean;
        regex: string | null;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id: string;
        title: string;
        description: string;
        imageFileId: string;
        transcribe: boolean;
        regex: string | null;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const editSourceResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    source: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>>;
    sessionUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | undefined;
    sessionUrl?: string | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | undefined;
    sessionUrl?: string | undefined;
}>;
export type EditSourceParams = z.infer<typeof editSourceParams>;
export type EditSourceRequest = z.infer<typeof editSourceRequest>;
export type EditSourceResponse = z.infer<typeof editSourceResponse>;
/** ******************************************************************************
*  Sync Source
******************************************************************************* */
export declare const syncSourceParams: z.ZodObject<{
    _id: z.ZodString;
    syncId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    _id: string;
    syncId: string;
}, {
    _id: string;
    syncId: string;
}>;
export declare const syncSourceRequest: z.ZodObject<{
    params: z.ZodObject<{
        _id: z.ZodString;
        syncId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        syncId: string;
    }, {
        _id: string;
        syncId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
        syncId: string;
    };
}, {
    params: {
        _id: string;
        syncId: string;
    };
}>;
export declare const syncSourceResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    source: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>>;
    lastSyncId: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | undefined;
    lastSyncId?: string | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | undefined;
    lastSyncId?: string | undefined;
}>;
export type SyncSourceParams = z.infer<typeof syncSourceParams>;
export type SyncSourceRequest = z.infer<typeof syncSourceRequest>;
export type SyncSourceResponse = z.infer<typeof syncSourceResponse>;
/** ******************************************************************************
*  Archive Source
******************************************************************************* */
export declare const archiveSourceParams: z.ZodObject<{
    _id: z.ZodString;
    archived: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    _id: string;
    archived: boolean;
}, {
    _id: string;
    archived: boolean;
}>;
export declare const archiveSourceRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        _id: z.ZodString;
        archived: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        archived: boolean;
    }, {
        _id: string;
        archived: boolean;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        _id: string;
        archived: boolean;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        _id: string;
        archived: boolean;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const archiveSourceResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    source: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>>>;
    bots: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        title: z.ZodString;
        description: z.ZodString;
        imageFileId: z.ZodString;
        brandColor: z.ZodString;
        website: z.ZodString;
        faqs: z.ZodArray<z.ZodString, "many">;
        model: z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>;
        archived: z.ZodBoolean;
        embed: z.ZodObject<{
            enabled: z.ZodOptional<z.ZodBoolean>;
            theme: z.ZodOptional<z.ZodEnum<["dark", "light"]>>;
            type: z.ZodOptional<z.ZodEnum<["attribute", "launcher"]>>;
            position: z.ZodOptional<z.ZodEnum<["bottom-right", "bottom-left"]>>;
            background: z.ZodOptional<z.ZodString>;
            color: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }, {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        }>;
        tracking: z.ZodObject<{
            utms: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            utms: string[];
        }, {
            utms: string[];
        }>;
        prompt: z.ZodObject<{
            topic: z.ZodString;
            context: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            topic: string;
            context: string;
        }, {
            topic: string;
            context: string;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }, {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }>, "many">>;
    invoice: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        subscriptionId: z.ZodString;
        stripeCustomerId: z.ZodString;
        stripeSubscriptionId: z.ZodNullable<z.ZodString>;
        stripeInvoiceId: z.ZodNullable<z.ZodString>;
        stripeProductId: z.ZodNullable<z.ZodString>;
        stripePriceId: z.ZodNullable<z.ZodString>;
        status: z.ZodEnum<["Pending", "Fulfilled", "Canceled", "Failed"]>;
        usage: z.ZodObject<{
            credits: z.ZodNumber;
            documents: z.ZodNumber;
            syncs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            credits: number;
            documents: number;
            syncs: number;
        }, {
            credits: number;
            documents: number;
            syncs: number;
        }>;
        usageLimits: z.ZodObject<{
            credits: z.ZodNumber;
            documents: z.ZodNumber;
            syncs: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            credits: number;
            documents: number;
            syncs: number;
        }, {
            credits: number;
            documents: number;
            syncs: number;
        }>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        status: "Pending" | "Failed" | "Canceled" | "Fulfilled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string | null;
        stripeCustomerId: string;
        stripeSubscriptionId: string | null;
        stripeProductId: string | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
        subscriptionId: string;
        stripeInvoiceId: string | null;
        usage: {
            credits: number;
            documents: number;
            syncs: number;
        };
    }, {
        status: "Pending" | "Failed" | "Canceled" | "Fulfilled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string | null;
        stripeCustomerId: string;
        stripeSubscriptionId: string | null;
        stripeProductId: string | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
        subscriptionId: string;
        stripeInvoiceId: string | null;
        usage: {
            credits: number;
            documents: number;
            syncs: number;
        };
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | null | undefined;
    bots?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }[] | undefined;
    invoice?: {
        status: "Pending" | "Failed" | "Canceled" | "Fulfilled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string | null;
        stripeCustomerId: string;
        stripeSubscriptionId: string | null;
        stripeProductId: string | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
        subscriptionId: string;
        stripeInvoiceId: string | null;
        usage: {
            credits: number;
            documents: number;
            syncs: number;
        };
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | null | undefined;
    bots?: {
        _id: string;
        organizationId: string;
        title: string;
        description: string;
        imageFileId: string;
        archived: boolean;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        sourceIds: string[];
        brandColor: string;
        website: string;
        faqs: string[];
        model: string;
        embed: {
            enabled?: boolean | undefined;
            theme?: "light" | "dark" | undefined;
            type?: "launcher" | "attribute" | undefined;
            position?: "bottom-right" | "bottom-left" | undefined;
            background?: string | undefined;
            color?: string | undefined;
        };
        tracking: {
            utms: string[];
        };
        prompt: {
            topic: string;
            context: string;
        };
    }[] | undefined;
    invoice?: {
        status: "Pending" | "Failed" | "Canceled" | "Fulfilled";
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        stripePriceId: string | null;
        stripeCustomerId: string;
        stripeSubscriptionId: string | null;
        stripeProductId: string | null;
        usageLimits: {
            credits: number;
            documents: number;
            syncs: number;
        };
        subscriptionId: string;
        stripeInvoiceId: string | null;
        usage: {
            credits: number;
            documents: number;
            syncs: number;
        };
    } | null | undefined;
}>;
export type ArchiveSourceParams = z.infer<typeof archiveSourceParams>;
export type ArchiveSourceRequest = z.infer<typeof archiveSourceRequest>;
export type ArchiveSourceResponse = z.infer<typeof archiveSourceResponse>;
/** ******************************************************************************
*  Get Source
******************************************************************************* */
export declare const getSourceParams: z.ZodObject<{
    sourceId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    sourceId: string;
}, {
    sourceId: string;
}>;
export declare const getSourceRequest: z.ZodObject<{
    params: z.ZodObject<{
        sourceId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        sourceId: string;
    }, {
        sourceId: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        sourceId: string;
    };
}, {
    params: {
        sourceId: string;
    };
}>;
export declare const getSourceResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    source: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | null | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    source?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    } | null | undefined;
}>;
export type GetSourceParams = z.infer<typeof getSourceParams>;
export type GetSourceRequest = z.infer<typeof getSourceRequest>;
export type GetSourceResponse = z.infer<typeof getSourceResponse>;
/** ******************************************************************************
*  List Sources
******************************************************************************* */
export declare const listSourcesParams: z.ZodObject<{
    archived: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    archived?: boolean | undefined;
}, {
    archived?: boolean | undefined;
}>;
export declare const listSourcesRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodOptional<z.ZodObject<{
        archived: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        archived?: boolean | undefined;
    }, {
        archived?: boolean | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
    params?: {
        archived?: boolean | undefined;
    } | undefined;
}, {
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
    params?: {
        archived?: boolean | undefined;
    } | undefined;
}>;
export declare const listSourcesResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    sources: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        syncId: z.ZodOptional<z.ZodString>;
        title: z.ZodString;
        description: z.ZodOptional<z.ZodString>;
        imageFileId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
        importUrl: z.ZodOptional<z.ZodString>;
        transcribe: z.ZodOptional<z.ZodBoolean>;
        regex: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        documentCount: z.ZodNumber;
        archived: z.ZodOptional<z.ZodBoolean>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    sources?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }[] | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    sources?: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        _id: string;
        organizationId: string;
        title: string;
        documentCount: number;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        syncId?: string | undefined;
        description?: string | undefined;
        imageFileId?: string | null | undefined;
        importUrl?: string | undefined;
        transcribe?: boolean | undefined;
        regex?: string | null | undefined;
        durationSeconds?: number | undefined;
        archived?: boolean | undefined;
    }[] | undefined;
}>;
export type ListSourcesParams = z.infer<typeof listSourcesParams>;
export type ListSourcesRequest = z.infer<typeof listSourcesRequest>;
export type ListSourcesResponse = z.infer<typeof listSourcesResponse>;
/** ******************************************************************************
*  Source Import Info
******************************************************************************* */
export declare const getSourceImportInfoParams: z.ZodObject<{
    importUrl: z.ZodString;
    type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
}, "strip", z.ZodTypeAny, {
    type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
    importUrl: string;
}, {
    type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
    importUrl: string;
}>;
export declare const getSourceImportInfoRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
    params: z.ZodObject<{
        importUrl: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "SiteMap", "Files", "WARC"]>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        importUrl: string;
    }, {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        importUrl: string;
    }>;
}, "strip", z.ZodTypeAny, {
    params: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        importUrl: string;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    params: {
        type: "YouTube" | "RSS" | "SiteMap" | "Files" | "WARC";
        importUrl: string;
    };
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const getSourceImportInfoResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
    info: z.ZodOptional<z.ZodObject<{
        title: z.ZodString;
        imageUrl: z.ZodOptional<z.ZodString>;
        documentCount: z.ZodNumber;
        durationHours: z.ZodOptional<z.ZodNumber>;
        durationSeconds: z.ZodOptional<z.ZodNumber>;
        transcriptionCost: z.ZodOptional<z.ZodNumber>;
        error: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        title: string;
        documentCount: number;
        imageUrl?: string | undefined;
        durationHours?: number | undefined;
        durationSeconds?: number | undefined;
        transcriptionCost?: number | undefined;
        error?: string | undefined;
    }, {
        title: string;
        documentCount: number;
        imageUrl?: string | undefined;
        durationHours?: number | undefined;
        durationSeconds?: number | undefined;
        transcriptionCost?: number | undefined;
        error?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    info?: {
        title: string;
        documentCount: number;
        imageUrl?: string | undefined;
        durationHours?: number | undefined;
        durationSeconds?: number | undefined;
        transcriptionCost?: number | undefined;
        error?: string | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
    info?: {
        title: string;
        documentCount: number;
        imageUrl?: string | undefined;
        durationHours?: number | undefined;
        durationSeconds?: number | undefined;
        transcriptionCost?: number | undefined;
        error?: string | undefined;
    } | undefined;
}>;
export type GetSourceImportInfoParams = z.infer<typeof getSourceImportInfoParams>;
export type GetSourceImportInfoRequest = z.infer<typeof getSourceImportInfoRequest>;
export type GetSourceImportInfoResponse = z.infer<typeof getSourceImportInfoResponse>;
