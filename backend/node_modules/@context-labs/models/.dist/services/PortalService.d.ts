import z from 'zod';
export declare const zPortalActions: z.ZodEnum<["Open", "Close", "Focus"]>;
export type PortalActions = z.infer<typeof zPortalActions>;
/** ******************************************************************************
*  Semantic Search
******************************************************************************* */
export declare const semanticSearchParams: z.ZodObject<{
    botId: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    syncIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    query: z.ZodString;
    topK: z.ZodOptional<z.ZodNumber>;
    distinctId: z.ZodString;
    origin: z.ZodNullable<z.ZodObject<{
        channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
        originId: z.ZodOptional<z.ZodString>;
        originName: z.ZodOptional<z.ZodString>;
        originChannelId: z.ZodOptional<z.ZodString>;
        originChannelName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    botId: string;
    sourceIds: string[];
    distinctId: string;
    origin: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | null;
    query: string;
    syncIds?: string[] | undefined;
    topK?: number | undefined;
}, {
    botId: string;
    sourceIds: string[];
    distinctId: string;
    origin: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | null;
    query: string;
    syncIds?: string[] | undefined;
    topK?: number | undefined;
}>;
export declare const semanticSearchResult: z.ZodObject<{
    snippets: z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        syncId: z.ZodString;
        documentId: z.ZodString;
        title: z.ZodString;
        text: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
        url: z.ZodString;
        domain: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        hash: z.ZodString;
        index: z.ZodNumber;
        startTime: z.ZodNullable<z.ZodString>;
        startSeconds: z.ZodNumber;
        endTime: z.ZodOptional<z.ZodString>;
        endSeconds: z.ZodOptional<z.ZodNumber>;
        releasedAt: z.ZodOptional<z.ZodNumber>;
        views: z.ZodOptional<z.ZodNumber>;
        pageNumber: z.ZodOptional<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    snippets: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[];
}, {
    snippets: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[];
}>;
export type SemanticSearchParams = z.infer<typeof semanticSearchParams>;
export type SemanticSearchResult = z.infer<typeof semanticSearchResult>;
/** ******************************************************************************
*  Create Generation
******************************************************************************* */
export declare const createGenerationParams: z.ZodObject<{
    botId: z.ZodString;
    sourceIds: z.ZodArray<z.ZodString, "many">;
    query: z.ZodString;
    distinctId: z.ZodString;
    origin: z.ZodOptional<z.ZodObject<{
        channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
        originId: z.ZodOptional<z.ZodString>;
        originName: z.ZodOptional<z.ZodString>;
        originChannelId: z.ZodOptional<z.ZodString>;
        originChannelName: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }, {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    botId: string;
    sourceIds: string[];
    distinctId: string;
    query: string;
    origin?: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | undefined;
}, {
    botId: string;
    sourceIds: string[];
    distinctId: string;
    query: string;
    origin?: {
        channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
        originId?: string | undefined;
        originName?: string | undefined;
        originChannelId?: string | undefined;
        originChannelName?: string | undefined;
    } | undefined;
}>;
export declare const createGenerationResponse: z.ZodObject<{
    query: z.ZodOptional<z.ZodObject<{
        _id: z.ZodString;
        distinctId: z.ZodString;
        organizationId: z.ZodString;
        botId: z.ZodString;
        sourceIds: z.ZodArray<z.ZodString, "many">;
        snippetIds: z.ZodArray<z.ZodString, "many">;
        input: z.ZodString;
        output: z.ZodString;
        helpful: z.ZodNullable<z.ZodBoolean>;
        mark: z.ZodNullable<z.ZodBoolean>;
        edits: z.ZodArray<z.ZodObject<{
            _id: z.ZodOptional<z.ZodString>;
            value: z.ZodString;
            meta: z.ZodObject<{
                createdAt: z.ZodOptional<z.ZodNumber>;
                createdBy: z.ZodOptional<z.ZodString>;
                lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
                lastUpdatedBy: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }, {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            }>;
        }, "strip", z.ZodTypeAny, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }, {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }>, "many">;
        model: z.ZodNullable<z.ZodNativeEnum<{
            GPT35Turbo: string;
            GPT35Turbo0613: string;
            GPT35Turbo16K: string;
            GPT4: string;
            GPT40613: string;
            GPT41106: string;
            TextEmbeddingAda002: string;
        }>>;
        embedding: z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>;
        type: z.ZodNativeEnum<typeof import("../enums/SearchTypes").EnumValues>;
        origin: z.ZodNullable<z.ZodObject<{
            channel: z.ZodEnum<["Attribute", "Launcher", "Standalone", "Discord", "Slack", "API"]>;
            originId: z.ZodOptional<z.ZodString>;
            originName: z.ZodOptional<z.ZodString>;
            originChannelId: z.ZodOptional<z.ZodString>;
            originChannelName: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }, {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        }>>;
        cachedQueryId: z.ZodNullable<z.ZodString>;
        geolocation: z.ZodNullable<z.ZodObject<{
            city: z.ZodOptional<z.ZodString>;
            country: z.ZodOptional<z.ZodString>;
            region: z.ZodOptional<z.ZodString>;
            countryRegion: z.ZodOptional<z.ZodString>;
            latitude: z.ZodOptional<z.ZodString>;
            longitude: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }, {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        }>>;
        lang: z.ZodOptional<z.ZodString>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }, {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    }>>;
    snippets: z.ZodOptional<z.ZodArray<z.ZodObject<{
        _id: z.ZodString;
        organizationId: z.ZodString;
        sourceId: z.ZodString;
        syncId: z.ZodString;
        documentId: z.ZodString;
        title: z.ZodString;
        text: z.ZodString;
        type: z.ZodEnum<["YouTube", "RSS", "WebPage", "File"]>;
        url: z.ZodString;
        domain: z.ZodOptional<z.ZodString>;
        lang: z.ZodOptional<z.ZodString>;
        hash: z.ZodString;
        index: z.ZodNumber;
        startTime: z.ZodNullable<z.ZodString>;
        startSeconds: z.ZodNumber;
        endTime: z.ZodOptional<z.ZodString>;
        endSeconds: z.ZodOptional<z.ZodNumber>;
        releasedAt: z.ZodOptional<z.ZodNumber>;
        views: z.ZodOptional<z.ZodNumber>;
        pageNumber: z.ZodOptional<z.ZodNumber>;
        meta: z.ZodObject<{
            createdAt: z.ZodOptional<z.ZodNumber>;
            createdBy: z.ZodOptional<z.ZodString>;
            lastUpdatedAt: z.ZodOptional<z.ZodNumber>;
            lastUpdatedBy: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }, {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        }>;
    }, "strip", z.ZodTypeAny, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }, {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }>, "many">>;
    error: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
    snippets?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[] | undefined;
    error?: string | undefined;
}, {
    query?: {
        type: import("../enums/SearchTypes").EnumValues;
        _id: string;
        organizationId: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        botId: string;
        sourceIds: string[];
        model: string | null;
        distinctId: string;
        snippetIds: string[];
        input: string;
        output: string;
        helpful: boolean | null;
        mark: boolean | null;
        edits: {
            value: string;
            meta: {
                createdAt?: number | undefined;
                createdBy?: string | undefined;
                lastUpdatedAt?: number | undefined;
                lastUpdatedBy?: string | undefined;
            };
            _id?: string | undefined;
        }[];
        embedding: number[] | null;
        origin: {
            channel: "Attribute" | "Launcher" | "Standalone" | "Discord" | "Slack" | "API";
            originId?: string | undefined;
            originName?: string | undefined;
            originChannelId?: string | undefined;
            originChannelName?: string | undefined;
        } | null;
        cachedQueryId: string | null;
        geolocation: {
            city?: string | undefined;
            country?: string | undefined;
            region?: string | undefined;
            countryRegion?: string | undefined;
            latitude?: string | undefined;
            longitude?: string | undefined;
        } | null;
        lang?: string | undefined;
    } | undefined;
    snippets?: {
        type: "YouTube" | "RSS" | "WebPage" | "File";
        _id: string;
        organizationId: string;
        syncId: string;
        title: string;
        meta: {
            createdAt?: number | undefined;
            createdBy?: string | undefined;
            lastUpdatedAt?: number | undefined;
            lastUpdatedBy?: string | undefined;
        };
        url: string;
        sourceId: string;
        documentId: string;
        text: string;
        hash: string;
        index: number;
        startTime: string | null;
        startSeconds: number;
        domain?: string | undefined;
        lang?: string | undefined;
        endTime?: string | undefined;
        endSeconds?: number | undefined;
        releasedAt?: number | undefined;
        views?: number | undefined;
        pageNumber?: number | undefined;
    }[] | undefined;
    error?: string | undefined;
}>;
export type CreateGenerationParams = z.infer<typeof createGenerationParams>;
export type CreateGenerationResponse = z.infer<typeof createGenerationResponse>;
