import { z } from 'zod';
declare const schema: z.ZodObject<{
    token: z.ZodString;
    team_id: z.ZodString;
    api_app_id: z.ZodString;
    challenge: z.ZodOptional<z.ZodString>;
    event: z.ZodObject<{
        client_msg_id: z.ZodString;
        type: z.ZodString;
        text: z.ZodString;
        user: z.ZodString;
        ts: z.ZodString;
        blocks: z.ZodArray<z.ZodObject<{
            type: z.ZodString;
            block_id: z.ZodString;
            elements: z.ZodArray<z.ZodObject<{
                type: z.ZodString;
                elements: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                    type: z.ZodString;
                    user_id: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    user_id: string;
                }, {
                    type: string;
                    user_id: string;
                }>, z.ZodObject<{
                    type: z.ZodString;
                    text: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                    text: string;
                }, {
                    type: string;
                    text: string;
                }>]>, "many">;
            }, "strip", z.ZodTypeAny, {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }, {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            type: string;
            block_id: string;
            elements: {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }[];
        }, {
            type: string;
            block_id: string;
            elements: {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }[];
        }>, "many">;
        team: z.ZodString;
        channel: z.ZodString;
        event_ts: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: string;
        text: string;
        client_msg_id: string;
        user: string;
        ts: string;
        blocks: {
            type: string;
            block_id: string;
            elements: {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }[];
        }[];
        team: string;
        channel: string;
        event_ts: string;
    }, {
        type: string;
        text: string;
        client_msg_id: string;
        user: string;
        ts: string;
        blocks: {
            type: string;
            block_id: string;
            elements: {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }[];
        }[];
        team: string;
        channel: string;
        event_ts: string;
    }>;
    type: z.ZodString;
    event_id: z.ZodString;
    event_time: z.ZodNumber;
    authorizations: z.ZodArray<z.ZodObject<{
        enterprise_id: z.ZodNull;
        team_id: z.ZodString;
        user_id: z.ZodString;
        is_bot: z.ZodBoolean;
        is_enterprise_install: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        team_id: string;
        user_id: string;
        enterprise_id: null;
        is_bot: boolean;
        is_enterprise_install: boolean;
    }, {
        team_id: string;
        user_id: string;
        enterprise_id: null;
        is_bot: boolean;
        is_enterprise_install: boolean;
    }>, "many">;
    is_ext_shared_channel: z.ZodBoolean;
    event_context: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: string;
    token: string;
    team_id: string;
    api_app_id: string;
    event: {
        type: string;
        text: string;
        client_msg_id: string;
        user: string;
        ts: string;
        blocks: {
            type: string;
            block_id: string;
            elements: {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }[];
        }[];
        team: string;
        channel: string;
        event_ts: string;
    };
    event_id: string;
    event_time: number;
    authorizations: {
        team_id: string;
        user_id: string;
        enterprise_id: null;
        is_bot: boolean;
        is_enterprise_install: boolean;
    }[];
    is_ext_shared_channel: boolean;
    event_context: string;
    challenge?: string | undefined;
}, {
    type: string;
    token: string;
    team_id: string;
    api_app_id: string;
    event: {
        type: string;
        text: string;
        client_msg_id: string;
        user: string;
        ts: string;
        blocks: {
            type: string;
            block_id: string;
            elements: {
                type: string;
                elements: ({
                    type: string;
                    user_id: string;
                } | {
                    type: string;
                    text: string;
                })[];
            }[];
        }[];
        team: string;
        channel: string;
        event_ts: string;
    };
    event_id: string;
    event_time: number;
    authorizations: {
        team_id: string;
        user_id: string;
        enterprise_id: null;
        is_bot: boolean;
        is_enterprise_install: boolean;
    }[];
    is_ext_shared_channel: boolean;
    event_context: string;
    challenge?: string | undefined;
}>;
export type SlackEvent = z.infer<typeof schema>;
export {};
