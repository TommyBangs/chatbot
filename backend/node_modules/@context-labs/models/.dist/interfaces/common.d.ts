import z from 'zod';
/** ******************************************************************************
* Error Handling
******************************************************************************* */
export declare const serviceError: z.ZodObject<{
    message: z.ZodString;
    fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    fields?: Record<string, string> | undefined;
}, {
    message: string;
    fields?: Record<string, string> | undefined;
}>;
export type ServiceError = z.infer<typeof serviceError>;
export declare const toError: (message: string) => ServiceError;
/** ******************************************************************************
*  Authentication
******************************************************************************* */
export declare const authToken: z.ZodString;
export declare const authData: z.ZodObject<{
    email: z.ZodOptional<z.ZodString>;
    userId: z.ZodOptional<z.ZodString>;
    organizationId: z.ZodOptional<z.ZodString>;
    token: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    email?: string | undefined;
    userId?: string | undefined;
    organizationId?: string | undefined;
    token?: string | undefined;
}, {
    email?: string | undefined;
    userId?: string | undefined;
    organizationId?: string | undefined;
    token?: string | undefined;
}>;
export type AuthToken = z.infer<typeof authToken>;
export type AuthData = z.infer<typeof authData>;
/** ******************************************************************************
*  Request/Response
******************************************************************************* */
export declare const serviceRequest: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
export declare const authedServiceRequest: z.ZodObject<{
    auth: z.ZodObject<{
        email: z.ZodOptional<z.ZodString>;
        userId: z.ZodOptional<z.ZodString>;
        organizationId: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }, {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}, {
    auth: {
        email?: string | undefined;
        userId?: string | undefined;
        organizationId?: string | undefined;
        token?: string | undefined;
    };
}>;
export declare const serviceResponse: z.ZodObject<{
    status: z.ZodEnum<[string, ...string[]]>;
    error: z.ZodOptional<z.ZodObject<{
        message: z.ZodString;
        fields: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, "strip", z.ZodTypeAny, {
        message: string;
        fields?: Record<string, string> | undefined;
    }, {
        message: string;
        fields?: Record<string, string> | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
}, {
    status: string;
    error?: {
        message: string;
        fields?: Record<string, string> | undefined;
    } | undefined;
}>;
export type ServiceRequest = z.infer<typeof serviceRequest>;
export type AuthedServiceRequest = z.infer<typeof authedServiceRequest>;
export type ServiceResponse = z.infer<typeof serviceResponse>;
