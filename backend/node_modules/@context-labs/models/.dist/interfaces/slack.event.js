"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const zod_1 = require("zod");
const schema = zod_1.z.object({
    token: zod_1.z.string(),
    team_id: zod_1.z.string(),
    api_app_id: zod_1.z.string(),
    challenge: zod_1.z.string().optional(),
    event: zod_1.z.object({
        client_msg_id: zod_1.z.string(),
        type: zod_1.z.string(),
        text: zod_1.z.string(),
        user: zod_1.z.string(),
        ts: zod_1.z.string(),
        blocks: zod_1.z.array(zod_1.z.object({
            type: zod_1.z.string(),
            block_id: zod_1.z.string(),
            elements: zod_1.z.array(zod_1.z.object({
                type: zod_1.z.string(),
                elements: zod_1.z.array(zod_1.z.union([
                    zod_1.z.object({ type: zod_1.z.string(), user_id: zod_1.z.string() }),
                    zod_1.z.object({ type: zod_1.z.string(), text: zod_1.z.string() }),
                ])),
            })),
        })),
        team: zod_1.z.string(),
        channel: zod_1.z.string(),
        event_ts: zod_1.z.string(),
    }),
    type: zod_1.z.string(),
    event_id: zod_1.z.string(),
    event_time: zod_1.z.number(),
    authorizations: zod_1.z.array(zod_1.z.object({
        enterprise_id: zod_1.z.null(),
        team_id: zod_1.z.string(),
        user_id: zod_1.z.string(),
        is_bot: zod_1.z.boolean(),
        is_enterprise_install: zod_1.z.boolean(),
    })),
    is_ext_shared_channel: zod_1.z.boolean(),
    event_context: zod_1.z.string(),
});
//# sourceMappingURL=slack.event.js.map